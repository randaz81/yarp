/* t_yarp_generator::generate_service:3763 */
/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarpdataplayer_console_IDL.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

/* t_yarp_generator::generate_service:3859 */
/* t_yarp_generator::generate_service_helper_classes:3907 */
/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// step helper class declaration
class yarpdataplayer_console_IDL_step_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_step_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"step"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::step()"};
    static constexpr const char* s_help{
        "Steps the player once. The player will be stepped\n"
        "until all parts have sent data\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// setFrame helper class declaration
class yarpdataplayer_console_IDL_setFrame_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_setFrame_helper() = default;
    explicit yarpdataplayer_console_IDL_setFrame_helper(const std::int32_t frameNum);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t frameNum);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t frameNum{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::int32_t);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setFrame"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::setFrame(const std::int32_t frameNum)"};
    static constexpr const char* s_help{
        "Sets the frame number to the user desired frame.\n"
        "@param frameNum specifies the frame number the user\n"
        " would like to skip to\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// getFrame helper class declaration
class yarpdataplayer_console_IDL_getFrame_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getFrame_helper() = default;
    explicit yarpdataplayer_console_IDL_getFrame_helper(const std::string& name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& name);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string name{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        std::int32_t return_helper{0};
    };

    using funcptr_t = std::int32_t (*)(const std::string&);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getFrame"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"std::int32_t yarpdataplayer_console_IDL::getFrame(const std::string& name)"};
    static constexpr const char* s_help{
        "Gets the frame number the user is requesting\n"
        "@param name specifies the name of the data to modify\n"
        " would like to skip to\n"
        "@return i32 returns the current frame index"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// load helper class declaration
class yarpdataplayer_console_IDL_load_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_load_helper() = default;
    explicit yarpdataplayer_console_IDL_load_helper(const std::string& path);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& path);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string path{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::string&);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"load"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::load(const std::string& path)"};
    static constexpr const char* s_help{
        "Loads a dataset from a path\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// play helper class declaration
class yarpdataplayer_console_IDL_play_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_play_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"play"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::play()"};
    static constexpr const char* s_help{
        "Plays the dataSets\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// pause helper class declaration
class yarpdataplayer_console_IDL_pause_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_pause_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"pause"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::pause()"};
    static constexpr const char* s_help{
        "Pauses the dataSets\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// stop helper class declaration
class yarpdataplayer_console_IDL_stop_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_stop_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"stop"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::stop()"};
    static constexpr const char* s_help{
        "Stops the dataSets\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// enable helper class declaration
class yarpdataplayer_console_IDL_enable_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_enable_helper() = default;
    explicit yarpdataplayer_console_IDL_enable_helper(const std::string& part);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& part);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string part{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::string&);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"enable"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::enable(const std::string& part)"};
    static constexpr const char* s_help{
        "Enables the specified part.\n"
        "@param name specifies the name of the loaded data\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// disable helper class declaration
class yarpdataplayer_console_IDL_disable_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_disable_helper() = default;
    explicit yarpdataplayer_console_IDL_disable_helper(const std::string& part);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& part);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string part{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::string&);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"disable"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::disable(const std::string& part)"};
    static constexpr const char* s_help{
        "Disable the specified part.\n"
        "@param name specifies the name of the loaded data\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// getAllParts helper class declaration
class yarpdataplayer_console_IDL_getAllParts_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getAllParts_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        std::vector<std::string> return_helper{};
    };

    using funcptr_t = std::vector<std::string> (*)();
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getAllParts"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"std::vector<std::string> yarpdataplayer_console_IDL::getAllParts()"};
    static constexpr const char* s_help{
        "Gets the names of all parts loaded.\n"
        "@return list of names of the loaded parts."
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// getPortName helper class declaration
class yarpdataplayer_console_IDL_getPortName_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getPortName_helper() = default;
    explicit yarpdataplayer_console_IDL_getPortName_helper(const std::string& part);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::string& part);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string part{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        std::string return_helper{};
    };

    using funcptr_t = std::string (*)(const std::string&);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getPortName"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"std::string yarpdataplayer_console_IDL::getPortName(const std::string& part)"};
    static constexpr const char* s_help{
        "Gets the name of the port associated to the specified part\n"
        "@param name specifies the name of the data to modify\n"
        "@return port name"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// setPortName helper class declaration
class yarpdataplayer_console_IDL_setPortName_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_setPortName_helper() = default;
    yarpdataplayer_console_IDL_setPortName_helper(const std::string& part, const std::string& new_name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const std::string& part, const std::string& new_name);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string part{};
        std::string new_name{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::string&, const std::string&);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setPortName"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::setPortName(const std::string& part, const std::string& new_name)"};
    static constexpr const char* s_help{
        "Sets the name of the port associated to the specified part\n"
        "@param part specifies the name of the data to modify\n"
        "@param new_name specifies the new name to assign to the port\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// setSpeed helper class declaration
class yarpdataplayer_console_IDL_setSpeed_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_setSpeed_helper() = default;
    explicit yarpdataplayer_console_IDL_setSpeed_helper(const double speed);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double speed);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double speed{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setSpeed"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::setSpeed(const double speed)"};
    static constexpr const char* s_help{
        "Sets the player speed\n"
        "@param speed specifies\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// getSpeed helper class declaration
class yarpdataplayer_console_IDL_getSpeed_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getSpeed_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getSpeed"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double yarpdataplayer_console_IDL::getSpeed()"};
    static constexpr const char* s_help{
        "Gets the player speed\n"
        "@return value of the player speed"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// repeat helper class declaration
class yarpdataplayer_console_IDL_repeat_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_repeat_helper() = default;
    explicit yarpdataplayer_console_IDL_repeat_helper(const bool val);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const bool val);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        bool val{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const bool);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"repeat"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::repeat(const bool val)"};
    static constexpr const char* s_help{
        "Sets repeat mode\n"
        "@param val if true repeat mode is active.\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// setStrict helper class declaration
class yarpdataplayer_console_IDL_setStrict_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_setStrict_helper() = default;
    explicit yarpdataplayer_console_IDL_setStrict_helper(const bool val);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const bool val);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        bool val{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const bool);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setStrict"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::setStrict(const bool val)"};
    static constexpr const char* s_help{
        "Sets strict mode\n"
        "@param val if true strict mode is active.\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// forward helper class declaration
class yarpdataplayer_console_IDL_forward_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_forward_helper() = default;
    explicit yarpdataplayer_console_IDL_forward_helper(const std::int32_t steps);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t steps);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t steps{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::int32_t);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"forward"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::forward(const std::int32_t steps)"};
    static constexpr const char* s_help{
        "Steps forward\n"
        "@param steps number of steps to go forward (default=5).\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// backward helper class declaration
class yarpdataplayer_console_IDL_backward_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_backward_helper() = default;
    explicit yarpdataplayer_console_IDL_backward_helper(const std::int32_t steps);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t steps);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t steps{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::int32_t);
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"backward"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::backward(const std::int32_t steps)"};
    static constexpr const char* s_help{
        "Steps backward\n"
        "@param steps number of steps to go backward (default=5).\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// getProgress helper class declaration
class yarpdataplayer_console_IDL_getProgress_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getProgress_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        double return_helper{0.0};
    };

    using funcptr_t = double (*)();
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getProgress"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"double yarpdataplayer_console_IDL::getProgress()"};
    static constexpr const char* s_help{
        "Get the progress of the parts\n"
        "@return the progress of the parts"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// getStatus helper class declaration
class yarpdataplayer_console_IDL_getStatus_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_getStatus_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        std::string return_helper{};
    };

    using funcptr_t = std::string (*)();
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getStatus"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"std::string yarpdataplayer_console_IDL::getStatus()"};
    static constexpr const char* s_help{
        "Get the status of playing\n"
        "@return the status (playing, paused, stopped)"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// resume helper class declaration
class yarpdataplayer_console_IDL_resume_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_resume_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"resume"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::resume()"};
    static constexpr const char* s_help{
        "Resume dataset from where it was paused\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// quit helper class declaration
class yarpdataplayer_console_IDL_quit_helper :
        public yarp::os::Portable
{
public:
    yarpdataplayer_console_IDL_quit_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(yarpdataplayer_console_IDL* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"quit"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool yarpdataplayer_console_IDL::quit()"};
    static constexpr const char* s_help{
        "Quit the module.\n"
        "@return true/false on success/failure"
    };
};

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// step helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_step_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_step_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_step_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_step_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_step_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_step_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_step_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_step_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_step_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_step_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_step_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_step_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_step_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_step_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_step_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->step();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// setFrame helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_setFrame_helper::yarpdataplayer_console_IDL_setFrame_helper(const std::int32_t frameNum) :
        cmd{frameNum}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_setFrame_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_setFrame_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_setFrame_helper::Command::Command(const std::int32_t frameNum) :
        frameNum{frameNum}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_setFrame_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_setFrame_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_setFrame_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_setFrame_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_setFrame_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeI32(frameNum)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_setFrame_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_setFrame_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_setFrame_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(frameNum)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_setFrame_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_setFrame_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_setFrame_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_setFrame_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_setFrame_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->setFrame(cmd.frameNum);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// getFrame helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_getFrame_helper::yarpdataplayer_console_IDL_getFrame_helper(const std::string& name) :
        cmd{name}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_getFrame_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_getFrame_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_getFrame_helper::Command::Command(const std::string& name) :
        name{name}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_getFrame_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_getFrame_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_getFrame_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_getFrame_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_getFrame_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeString(name)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_getFrame_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_getFrame_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_getFrame_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(name)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_getFrame_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_getFrame_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_getFrame_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeI32(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_getFrame_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_getFrame_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->getFrame(cmd.name);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// load helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_load_helper::yarpdataplayer_console_IDL_load_helper(const std::string& path) :
        cmd{path}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_load_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_load_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_load_helper::Command::Command(const std::string& path) :
        path{path}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_load_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_load_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_load_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_load_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_load_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeString(path)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_load_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_load_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_load_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(path)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_load_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_load_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_load_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_load_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_load_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->load(cmd.path);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// play helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_play_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_play_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_play_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_play_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_play_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_play_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_play_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_play_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_play_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_play_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_play_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_play_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_play_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_play_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_play_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->play();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// pause helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_pause_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_pause_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_pause_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_pause_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_pause_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_pause_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_pause_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_pause_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_pause_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_pause_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_pause_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_pause_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_pause_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_pause_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_pause_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->pause();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// stop helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_stop_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_stop_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_stop_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_stop_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_stop_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_stop_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_stop_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_stop_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_stop_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_stop_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_stop_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_stop_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_stop_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_stop_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_stop_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->stop();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// enable helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_enable_helper::yarpdataplayer_console_IDL_enable_helper(const std::string& part) :
        cmd{part}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_enable_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_enable_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_enable_helper::Command::Command(const std::string& part) :
        part{part}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_enable_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_enable_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_enable_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_enable_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_enable_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeString(part)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_enable_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_enable_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_enable_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(part)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_enable_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_enable_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_enable_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_enable_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_enable_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->enable(cmd.part);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// disable helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_disable_helper::yarpdataplayer_console_IDL_disable_helper(const std::string& part) :
        cmd{part}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_disable_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_disable_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_disable_helper::Command::Command(const std::string& part) :
        part{part}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_disable_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_disable_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_disable_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_disable_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_disable_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeString(part)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_disable_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_disable_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_disable_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(part)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_disable_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_disable_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_disable_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_disable_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_disable_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->disable(cmd.part);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// getAllParts helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_getAllParts_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_getAllParts_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_container:1315 */
        if (!writer.writeListBegin(BOTTLE_TAG_STRING, return_helper.size())) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
        for (const auto& _item : return_helper) {
/* t_yarp_generator::generate_serialize_list_element:1420 */
/* t_yarp_generator::generate_serialize_field:1146 */
            if (!writer.writeString(_item, true)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
        }
        if (!writer.writeListEnd()) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_getAllParts_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_container:1649 */
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_STRING) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return_helper.resize(_csize);
    for (size_t _i = 0; _i < _csize; ++_i) {
/* t_yarp_generator::generate_deserialize_list_element:1793 */
/* t_yarp_generator::generate_deserialize_field:1449 */
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readString(return_helper[_i])) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_getAllParts_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->getAllParts();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// getPortName helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_getPortName_helper::yarpdataplayer_console_IDL_getPortName_helper(const std::string& part) :
        cmd{part}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_getPortName_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_getPortName_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_getPortName_helper::Command::Command(const std::string& part) :
        part{part}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_getPortName_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_getPortName_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_getPortName_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_getPortName_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_getPortName_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeString(part)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_getPortName_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_getPortName_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_getPortName_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(part)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_getPortName_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_getPortName_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_getPortName_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeString(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_getPortName_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_getPortName_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->getPortName(cmd.part);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// setPortName helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_setPortName_helper::yarpdataplayer_console_IDL_setPortName_helper(const std::string& part, const std::string& new_name) :
        cmd{part, new_name}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_setPortName_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_setPortName_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_setPortName_helper::Command::Command(const std::string& part, const std::string& new_name) :
        part{part},
        new_name{new_name}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_setPortName_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_setPortName_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_setPortName_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_setPortName_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_setPortName_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeString(part)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeString(new_name)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_setPortName_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_setPortName_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_setPortName_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(part)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(new_name)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_setPortName_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_setPortName_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_setPortName_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_setPortName_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_setPortName_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->setPortName(cmd.part, cmd.new_name);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// setSpeed helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_setSpeed_helper::yarpdataplayer_console_IDL_setSpeed_helper(const double speed) :
        cmd{speed}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_setSpeed_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_setSpeed_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_setSpeed_helper::Command::Command(const double speed) :
        speed{speed}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(speed)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(speed)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_setSpeed_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_setSpeed_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->setSpeed(cmd.speed);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// getSpeed helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_getSpeed_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_getSpeed_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeFloat64(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_getSpeed_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_getSpeed_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->getSpeed();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// repeat helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_repeat_helper::yarpdataplayer_console_IDL_repeat_helper(const bool val) :
        cmd{val}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_repeat_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_repeat_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_repeat_helper::Command::Command(const bool val) :
        val{val}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_repeat_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_repeat_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_repeat_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_repeat_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_repeat_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeBool(val)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_repeat_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_repeat_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_repeat_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (!reader.readBool(val)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        val = false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_repeat_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_repeat_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_repeat_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_repeat_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_repeat_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->repeat(cmd.val);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// setStrict helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_setStrict_helper::yarpdataplayer_console_IDL_setStrict_helper(const bool val) :
        cmd{val}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_setStrict_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_setStrict_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_setStrict_helper::Command::Command(const bool val) :
        val{val}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_setStrict_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_setStrict_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_setStrict_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_setStrict_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_setStrict_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeBool(val)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_setStrict_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_setStrict_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_setStrict_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (!reader.readBool(val)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        val = false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_setStrict_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_setStrict_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_setStrict_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_setStrict_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_setStrict_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->setStrict(cmd.val);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// forward helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_forward_helper::yarpdataplayer_console_IDL_forward_helper(const std::int32_t steps) :
        cmd{steps}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_forward_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_forward_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_forward_helper::Command::Command(const std::int32_t steps) :
        steps{steps}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_forward_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_forward_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_forward_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_forward_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_forward_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeI32(steps)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_forward_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_forward_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_forward_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (!reader.readI32(steps)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        steps = 5;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_forward_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_forward_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_forward_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_forward_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_forward_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->forward(cmd.steps);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// backward helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
yarpdataplayer_console_IDL_backward_helper::yarpdataplayer_console_IDL_backward_helper(const std::int32_t steps) :
        cmd{steps}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_backward_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_backward_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
yarpdataplayer_console_IDL_backward_helper::Command::Command(const std::int32_t steps) :
        steps{steps}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_backward_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_backward_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_backward_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_backward_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_backward_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeI32(steps)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_backward_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_backward_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_backward_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (!reader.readI32(steps)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        steps = 5;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_backward_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_backward_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_backward_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_backward_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_backward_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->backward(cmd.steps);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// getProgress helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_getProgress_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_getProgress_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_getProgress_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_getProgress_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_getProgress_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_getProgress_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_getProgress_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_getProgress_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_getProgress_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_getProgress_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_getProgress_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_getProgress_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_getProgress_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeFloat64(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_getProgress_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_getProgress_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->getProgress();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// getStatus helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_getStatus_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_getStatus_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_getStatus_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_getStatus_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_getStatus_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_getStatus_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_getStatus_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_getStatus_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_getStatus_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_getStatus_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_getStatus_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_getStatus_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_getStatus_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeString(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_getStatus_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_getStatus_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->getStatus();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// resume helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_resume_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_resume_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_resume_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_resume_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_resume_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_resume_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_resume_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_resume_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_resume_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_resume_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_resume_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_resume_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_resume_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_resume_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_resume_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->resume();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// quit helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool yarpdataplayer_console_IDL_quit_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool yarpdataplayer_console_IDL_quit_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool yarpdataplayer_console_IDL_quit_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool yarpdataplayer_console_IDL_quit_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool yarpdataplayer_console_IDL_quit_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool yarpdataplayer_console_IDL_quit_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool yarpdataplayer_console_IDL_quit_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool yarpdataplayer_console_IDL_quit_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool yarpdataplayer_console_IDL_quit_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool yarpdataplayer_console_IDL_quit_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool yarpdataplayer_console_IDL_quit_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool yarpdataplayer_console_IDL_quit_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool yarpdataplayer_console_IDL_quit_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool yarpdataplayer_console_IDL_quit_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void yarpdataplayer_console_IDL_quit_helper::call(yarpdataplayer_console_IDL* ptr)
{
    reply.return_helper = ptr->quit();
}

/* t_yarp_generator::generate_service_constructor:4571 */
// Constructor
yarpdataplayer_console_IDL::yarpdataplayer_console_IDL()
{
    yarp().setOwner(*this);
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::step()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_step_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_step_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::setFrame(const std::int32_t frameNum)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_setFrame_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_setFrame_helper helper{frameNum};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
std::int32_t yarpdataplayer_console_IDL::getFrame(const std::string& name)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getFrame_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getFrame_helper helper{name};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : std::int32_t{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::load(const std::string& path)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_load_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_load_helper helper{path};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::play()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_play_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_play_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::pause()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_pause_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_pause_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::stop()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_stop_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_stop_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::enable(const std::string& part)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_enable_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_enable_helper helper{part};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::disable(const std::string& part)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_disable_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_disable_helper helper{part};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
std::vector<std::string> yarpdataplayer_console_IDL::getAllParts()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getAllParts_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getAllParts_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : std::vector<std::string>{};
}

/* t_yarp_generator::generate_service_method:4596 */
std::string yarpdataplayer_console_IDL::getPortName(const std::string& part)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getPortName_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getPortName_helper helper{part};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : std::string{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::setPortName(const std::string& part, const std::string& new_name)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_setPortName_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_setPortName_helper helper{part, new_name};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::setSpeed(const double speed)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_setSpeed_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_setSpeed_helper helper{speed};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
double yarpdataplayer_console_IDL::getSpeed()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getSpeed_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getSpeed_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::repeat(const bool val)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_repeat_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_repeat_helper helper{val};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::setStrict(const bool val)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_setStrict_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_setStrict_helper helper{val};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::forward(const std::int32_t steps)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_forward_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_forward_helper helper{steps};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::backward(const std::int32_t steps)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_backward_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_backward_helper helper{steps};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
double yarpdataplayer_console_IDL::getProgress()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getProgress_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getProgress_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : double{};
}

/* t_yarp_generator::generate_service_method:4596 */
std::string yarpdataplayer_console_IDL::getStatus()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_getStatus_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_getStatus_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : std::string{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::resume()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_resume_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_resume_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool yarpdataplayer_console_IDL::quit()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", yarpdataplayer_console_IDL_quit_helper::s_prototype);
    }
    yarpdataplayer_console_IDL_quit_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_help:4649 */
// help method
std::vector<std::string> yarpdataplayer_console_IDL::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(yarpdataplayer_console_IDL_step_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_setFrame_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getFrame_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_load_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_play_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_pause_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_stop_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_enable_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_disable_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getAllParts_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getPortName_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_setPortName_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_setSpeed_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getSpeed_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_repeat_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_setStrict_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_forward_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_backward_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getProgress_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_getStatus_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_resume_helper::s_tag);
        helpString.emplace_back(yarpdataplayer_console_IDL_quit_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == yarpdataplayer_console_IDL_step_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_step_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_step_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_setFrame_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_setFrame_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_setFrame_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getFrame_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getFrame_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getFrame_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_load_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_load_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_load_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_play_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_play_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_play_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_pause_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_pause_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_pause_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_stop_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_stop_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_stop_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_enable_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_enable_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_enable_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_disable_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_disable_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_disable_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getAllParts_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getAllParts_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getAllParts_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getPortName_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getPortName_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getPortName_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_setPortName_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_setPortName_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_setPortName_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_setSpeed_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_setSpeed_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_setSpeed_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getSpeed_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getSpeed_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getSpeed_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_repeat_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_repeat_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_repeat_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_setStrict_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_setStrict_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_setStrict_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_forward_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_forward_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_forward_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_backward_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_backward_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_backward_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getProgress_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getProgress_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getProgress_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_getStatus_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_getStatus_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_getStatus_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_resume_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_resume_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_resume_helper::s_help);
        }
        if (functionName == yarpdataplayer_console_IDL_quit_helper::s_tag) {
            helpString.emplace_back(yarpdataplayer_console_IDL_quit_helper::s_prototype);
            helpString.emplace_back(yarpdataplayer_console_IDL_quit_helper::s_help);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

/* t_yarp_generator::generate_service_read:4731 */
// read from ConnectionReader
bool yarpdataplayer_console_IDL::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 1;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if (tag == yarpdataplayer_console_IDL_step_helper::s_tag) {
            yarpdataplayer_console_IDL_step_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_setFrame_helper::s_tag) {
            yarpdataplayer_console_IDL_setFrame_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getFrame_helper::s_tag) {
            yarpdataplayer_console_IDL_getFrame_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_load_helper::s_tag) {
            yarpdataplayer_console_IDL_load_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_play_helper::s_tag) {
            yarpdataplayer_console_IDL_play_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_pause_helper::s_tag) {
            yarpdataplayer_console_IDL_pause_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_stop_helper::s_tag) {
            yarpdataplayer_console_IDL_stop_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_enable_helper::s_tag) {
            yarpdataplayer_console_IDL_enable_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_disable_helper::s_tag) {
            yarpdataplayer_console_IDL_disable_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getAllParts_helper::s_tag) {
            yarpdataplayer_console_IDL_getAllParts_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getPortName_helper::s_tag) {
            yarpdataplayer_console_IDL_getPortName_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_setPortName_helper::s_tag) {
            yarpdataplayer_console_IDL_setPortName_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_setSpeed_helper::s_tag) {
            yarpdataplayer_console_IDL_setSpeed_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getSpeed_helper::s_tag) {
            yarpdataplayer_console_IDL_getSpeed_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_repeat_helper::s_tag) {
            yarpdataplayer_console_IDL_repeat_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_setStrict_helper::s_tag) {
            yarpdataplayer_console_IDL_setStrict_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_forward_helper::s_tag) {
            yarpdataplayer_console_IDL_forward_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_backward_helper::s_tag) {
            yarpdataplayer_console_IDL_backward_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getProgress_helper::s_tag) {
            yarpdataplayer_console_IDL_getProgress_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_getStatus_helper::s_tag) {
            yarpdataplayer_console_IDL_getStatus_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_resume_helper::s_tag) {
            yarpdataplayer_console_IDL_resume_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == yarpdataplayer_console_IDL_quit_helper::s_tag) {
            yarpdataplayer_console_IDL_quit_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
