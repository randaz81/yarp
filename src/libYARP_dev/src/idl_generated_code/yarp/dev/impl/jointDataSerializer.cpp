/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/impl/jointDataSerializer.h>

namespace yarp::dev::impl {

// Read structure on a Wire
bool jointDataSerializer::read(yarp::os::idl::WireReader& reader)
{
    if (!read_jointPosition(reader)) {
        return false;
    }
    if (!read_jointPosition_isValid(reader)) {
        return false;
    }
    if (!read_jointVelocity(reader)) {
        return false;
    }
    if (!read_jointVelocity_isValid(reader)) {
        return false;
    }
    if (!read_jointAcceleration(reader)) {
        return false;
    }
    if (!read_jointAcceleration_isValid(reader)) {
        return false;
    }
    if (!read_motorPosition(reader)) {
        return false;
    }
    if (!read_motorPosition_isValid(reader)) {
        return false;
    }
    if (!read_motorVelocity(reader)) {
        return false;
    }
    if (!read_motorVelocity_isValid(reader)) {
        return false;
    }
    if (!read_motorAcceleration(reader)) {
        return false;
    }
    if (!read_motorAcceleration_isValid(reader)) {
        return false;
    }
    if (!read_torque(reader)) {
        return false;
    }
    if (!read_torque_isValid(reader)) {
        return false;
    }
    if (!read_pwmDutycycle(reader)) {
        return false;
    }
    if (!read_pwmDutycycle_isValid(reader)) {
        return false;
    }
    if (!read_current(reader)) {
        return false;
    }
    if (!read_current_isValid(reader)) {
        return false;
    }
    if (!read_controlMode(reader)) {
        return false;
    }
    if (!read_controlMode_isValid(reader)) {
        return false;
    }
    if (!read_interactionMode(reader)) {
        return false;
    }
    if (!read_interactionMode_isValid(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool jointDataSerializer::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(22)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool jointDataSerializer::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_jointPosition(writer)) {
        return false;
    }
    if (!write_jointPosition_isValid(writer)) {
        return false;
    }
    if (!write_jointVelocity(writer)) {
        return false;
    }
    if (!write_jointVelocity_isValid(writer)) {
        return false;
    }
    if (!write_jointAcceleration(writer)) {
        return false;
    }
    if (!write_jointAcceleration_isValid(writer)) {
        return false;
    }
    if (!write_motorPosition(writer)) {
        return false;
    }
    if (!write_motorPosition_isValid(writer)) {
        return false;
    }
    if (!write_motorVelocity(writer)) {
        return false;
    }
    if (!write_motorVelocity_isValid(writer)) {
        return false;
    }
    if (!write_motorAcceleration(writer)) {
        return false;
    }
    if (!write_motorAcceleration_isValid(writer)) {
        return false;
    }
    if (!write_torque(writer)) {
        return false;
    }
    if (!write_torque_isValid(writer)) {
        return false;
    }
    if (!write_pwmDutycycle(writer)) {
        return false;
    }
    if (!write_pwmDutycycle_isValid(writer)) {
        return false;
    }
    if (!write_current(writer)) {
        return false;
    }
    if (!write_current_isValid(writer)) {
        return false;
    }
    if (!write_controlMode(writer)) {
        return false;
    }
    if (!write_controlMode_isValid(writer)) {
        return false;
    }
    if (!write_interactionMode(writer)) {
        return false;
    }
    if (!write_interactionMode_isValid(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool jointDataSerializer::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(22)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string jointDataSerializer::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read jointPosition field
bool jointDataSerializer::read_jointPosition(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->jointPosition.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->jointPosition.data()), mStorage->jointPosition.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write jointPosition field
bool jointDataSerializer::write_jointPosition(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->jointPosition.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->jointPosition.data()), mStorage->jointPosition.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) jointPosition field
bool jointDataSerializer::nested_read_jointPosition(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->jointPosition.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->jointPosition.data()), mStorage->jointPosition.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) jointPosition field
bool jointDataSerializer::nested_write_jointPosition(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->jointPosition.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->jointPosition.data()), mStorage->jointPosition.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read jointPosition_isValid field
bool jointDataSerializer::read_jointPosition_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->jointPosition_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write jointPosition_isValid field
bool jointDataSerializer::write_jointPosition_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->jointPosition_isValid)) {
        return false;
    }
    return true;
}

// read (nested) jointPosition_isValid field
bool jointDataSerializer::nested_read_jointPosition_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->jointPosition_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) jointPosition_isValid field
bool jointDataSerializer::nested_write_jointPosition_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->jointPosition_isValid)) {
        return false;
    }
    return true;
}

// read jointVelocity field
bool jointDataSerializer::read_jointVelocity(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->jointVelocity.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->jointVelocity.data()), mStorage->jointVelocity.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write jointVelocity field
bool jointDataSerializer::write_jointVelocity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->jointVelocity.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->jointVelocity.data()), mStorage->jointVelocity.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) jointVelocity field
bool jointDataSerializer::nested_read_jointVelocity(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->jointVelocity.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->jointVelocity.data()), mStorage->jointVelocity.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) jointVelocity field
bool jointDataSerializer::nested_write_jointVelocity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->jointVelocity.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->jointVelocity.data()), mStorage->jointVelocity.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read jointVelocity_isValid field
bool jointDataSerializer::read_jointVelocity_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->jointVelocity_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write jointVelocity_isValid field
bool jointDataSerializer::write_jointVelocity_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->jointVelocity_isValid)) {
        return false;
    }
    return true;
}

// read (nested) jointVelocity_isValid field
bool jointDataSerializer::nested_read_jointVelocity_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->jointVelocity_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) jointVelocity_isValid field
bool jointDataSerializer::nested_write_jointVelocity_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->jointVelocity_isValid)) {
        return false;
    }
    return true;
}

// read jointAcceleration field
bool jointDataSerializer::read_jointAcceleration(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->jointAcceleration.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->jointAcceleration.data()), mStorage->jointAcceleration.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write jointAcceleration field
bool jointDataSerializer::write_jointAcceleration(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->jointAcceleration.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->jointAcceleration.data()), mStorage->jointAcceleration.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) jointAcceleration field
bool jointDataSerializer::nested_read_jointAcceleration(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->jointAcceleration.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->jointAcceleration.data()), mStorage->jointAcceleration.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) jointAcceleration field
bool jointDataSerializer::nested_write_jointAcceleration(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->jointAcceleration.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->jointAcceleration.data()), mStorage->jointAcceleration.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read jointAcceleration_isValid field
bool jointDataSerializer::read_jointAcceleration_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->jointAcceleration_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write jointAcceleration_isValid field
bool jointDataSerializer::write_jointAcceleration_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->jointAcceleration_isValid)) {
        return false;
    }
    return true;
}

// read (nested) jointAcceleration_isValid field
bool jointDataSerializer::nested_read_jointAcceleration_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->jointAcceleration_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) jointAcceleration_isValid field
bool jointDataSerializer::nested_write_jointAcceleration_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->jointAcceleration_isValid)) {
        return false;
    }
    return true;
}

// read motorPosition field
bool jointDataSerializer::read_motorPosition(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->motorPosition.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->motorPosition.data()), mStorage->motorPosition.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write motorPosition field
bool jointDataSerializer::write_motorPosition(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->motorPosition.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->motorPosition.data()), mStorage->motorPosition.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) motorPosition field
bool jointDataSerializer::nested_read_motorPosition(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->motorPosition.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->motorPosition.data()), mStorage->motorPosition.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) motorPosition field
bool jointDataSerializer::nested_write_motorPosition(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->motorPosition.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->motorPosition.data()), mStorage->motorPosition.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read motorPosition_isValid field
bool jointDataSerializer::read_motorPosition_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->motorPosition_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write motorPosition_isValid field
bool jointDataSerializer::write_motorPosition_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->motorPosition_isValid)) {
        return false;
    }
    return true;
}

// read (nested) motorPosition_isValid field
bool jointDataSerializer::nested_read_motorPosition_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->motorPosition_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) motorPosition_isValid field
bool jointDataSerializer::nested_write_motorPosition_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->motorPosition_isValid)) {
        return false;
    }
    return true;
}

// read motorVelocity field
bool jointDataSerializer::read_motorVelocity(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->motorVelocity.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->motorVelocity.data()), mStorage->motorVelocity.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write motorVelocity field
bool jointDataSerializer::write_motorVelocity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->motorVelocity.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->motorVelocity.data()), mStorage->motorVelocity.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) motorVelocity field
bool jointDataSerializer::nested_read_motorVelocity(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->motorVelocity.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->motorVelocity.data()), mStorage->motorVelocity.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) motorVelocity field
bool jointDataSerializer::nested_write_motorVelocity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->motorVelocity.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->motorVelocity.data()), mStorage->motorVelocity.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read motorVelocity_isValid field
bool jointDataSerializer::read_motorVelocity_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->motorVelocity_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write motorVelocity_isValid field
bool jointDataSerializer::write_motorVelocity_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->motorVelocity_isValid)) {
        return false;
    }
    return true;
}

// read (nested) motorVelocity_isValid field
bool jointDataSerializer::nested_read_motorVelocity_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->motorVelocity_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) motorVelocity_isValid field
bool jointDataSerializer::nested_write_motorVelocity_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->motorVelocity_isValid)) {
        return false;
    }
    return true;
}

// read motorAcceleration field
bool jointDataSerializer::read_motorAcceleration(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->motorAcceleration.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->motorAcceleration.data()), mStorage->motorAcceleration.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write motorAcceleration field
bool jointDataSerializer::write_motorAcceleration(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->motorAcceleration.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->motorAcceleration.data()), mStorage->motorAcceleration.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) motorAcceleration field
bool jointDataSerializer::nested_read_motorAcceleration(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->motorAcceleration.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->motorAcceleration.data()), mStorage->motorAcceleration.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) motorAcceleration field
bool jointDataSerializer::nested_write_motorAcceleration(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->motorAcceleration.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->motorAcceleration.data()), mStorage->motorAcceleration.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read motorAcceleration_isValid field
bool jointDataSerializer::read_motorAcceleration_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->motorAcceleration_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write motorAcceleration_isValid field
bool jointDataSerializer::write_motorAcceleration_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->motorAcceleration_isValid)) {
        return false;
    }
    return true;
}

// read (nested) motorAcceleration_isValid field
bool jointDataSerializer::nested_read_motorAcceleration_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->motorAcceleration_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) motorAcceleration_isValid field
bool jointDataSerializer::nested_write_motorAcceleration_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->motorAcceleration_isValid)) {
        return false;
    }
    return true;
}

// read torque field
bool jointDataSerializer::read_torque(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->torque.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->torque.data()), mStorage->torque.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write torque field
bool jointDataSerializer::write_torque(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->torque.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->torque.data()), mStorage->torque.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) torque field
bool jointDataSerializer::nested_read_torque(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->torque.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->torque.data()), mStorage->torque.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) torque field
bool jointDataSerializer::nested_write_torque(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->torque.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->torque.data()), mStorage->torque.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read torque_isValid field
bool jointDataSerializer::read_torque_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->torque_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write torque_isValid field
bool jointDataSerializer::write_torque_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->torque_isValid)) {
        return false;
    }
    return true;
}

// read (nested) torque_isValid field
bool jointDataSerializer::nested_read_torque_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->torque_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) torque_isValid field
bool jointDataSerializer::nested_write_torque_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->torque_isValid)) {
        return false;
    }
    return true;
}

// read pwmDutycycle field
bool jointDataSerializer::read_pwmDutycycle(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->pwmDutycycle.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->pwmDutycycle.data()), mStorage->pwmDutycycle.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write pwmDutycycle field
bool jointDataSerializer::write_pwmDutycycle(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->pwmDutycycle.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->pwmDutycycle.data()), mStorage->pwmDutycycle.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) pwmDutycycle field
bool jointDataSerializer::nested_read_pwmDutycycle(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->pwmDutycycle.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->pwmDutycycle.data()), mStorage->pwmDutycycle.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) pwmDutycycle field
bool jointDataSerializer::nested_write_pwmDutycycle(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->pwmDutycycle.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->pwmDutycycle.data()), mStorage->pwmDutycycle.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read pwmDutycycle_isValid field
bool jointDataSerializer::read_pwmDutycycle_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->pwmDutycycle_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write pwmDutycycle_isValid field
bool jointDataSerializer::write_pwmDutycycle_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->pwmDutycycle_isValid)) {
        return false;
    }
    return true;
}

// read (nested) pwmDutycycle_isValid field
bool jointDataSerializer::nested_read_pwmDutycycle_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->pwmDutycycle_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) pwmDutycycle_isValid field
bool jointDataSerializer::nested_write_pwmDutycycle_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->pwmDutycycle_isValid)) {
        return false;
    }
    return true;
}

// read current field
bool jointDataSerializer::read_current(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->current.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->current.data()), mStorage->current.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write current field
bool jointDataSerializer::write_current(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->current.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->current.data()), mStorage->current.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) current field
bool jointDataSerializer::nested_read_current(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->current.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->current.data()), mStorage->current.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) current field
bool jointDataSerializer::nested_write_current(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->current.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->current.data()), mStorage->current.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read current_isValid field
bool jointDataSerializer::read_current_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->current_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write current_isValid field
bool jointDataSerializer::write_current_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->current_isValid)) {
        return false;
    }
    return true;
}

// read (nested) current_isValid field
bool jointDataSerializer::nested_read_current_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->current_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) current_isValid field
bool jointDataSerializer::nested_write_current_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->current_isValid)) {
        return false;
    }
    return true;
}

// read controlMode field
bool jointDataSerializer::read_controlMode(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_INT32) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->controlMode.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->controlMode.data()), mStorage->controlMode.size() * sizeof(std::int32_t))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write controlMode field
bool jointDataSerializer::write_controlMode(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_INT32, mStorage->controlMode.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->controlMode.data()), mStorage->controlMode.size() * sizeof(std::int32_t))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) controlMode field
bool jointDataSerializer::nested_read_controlMode(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_INT32) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->controlMode.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->controlMode.data()), mStorage->controlMode.size() * sizeof(std::int32_t))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) controlMode field
bool jointDataSerializer::nested_write_controlMode(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_INT32, mStorage->controlMode.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->controlMode.data()), mStorage->controlMode.size() * sizeof(std::int32_t))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read controlMode_isValid field
bool jointDataSerializer::read_controlMode_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->controlMode_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write controlMode_isValid field
bool jointDataSerializer::write_controlMode_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->controlMode_isValid)) {
        return false;
    }
    return true;
}

// read (nested) controlMode_isValid field
bool jointDataSerializer::nested_read_controlMode_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->controlMode_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) controlMode_isValid field
bool jointDataSerializer::nested_write_controlMode_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->controlMode_isValid)) {
        return false;
    }
    return true;
}

// read interactionMode field
bool jointDataSerializer::read_interactionMode(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_INT32) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->interactionMode.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->interactionMode.data()), mStorage->interactionMode.size() * sizeof(std::int32_t))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write interactionMode field
bool jointDataSerializer::write_interactionMode(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_INT32, mStorage->interactionMode.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->interactionMode.data()), mStorage->interactionMode.size() * sizeof(std::int32_t))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) interactionMode field
bool jointDataSerializer::nested_read_interactionMode(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_INT32) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->interactionMode.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->interactionMode.data()), mStorage->interactionMode.size() * sizeof(std::int32_t))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) interactionMode field
bool jointDataSerializer::nested_write_interactionMode(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_INT32, mStorage->interactionMode.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->interactionMode.data()), mStorage->interactionMode.size() * sizeof(std::int32_t))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read interactionMode_isValid field
bool jointDataSerializer::read_interactionMode_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->interactionMode_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write interactionMode_isValid field
bool jointDataSerializer::write_interactionMode_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->interactionMode_isValid)) {
        return false;
    }
    return true;
}

// read (nested) interactionMode_isValid field
bool jointDataSerializer::nested_read_interactionMode_isValid(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mStorage->interactionMode_isValid)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) interactionMode_isValid field
bool jointDataSerializer::nested_write_interactionMode_isValid(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mStorage->interactionMode_isValid)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev::impl
