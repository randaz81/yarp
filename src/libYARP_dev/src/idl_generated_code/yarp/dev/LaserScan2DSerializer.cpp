/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/LaserScan2DSerializer.h>

namespace yarp::dev {

// Read structure on a Wire
bool LaserScan2DSerializer::read(yarp::os::idl::WireReader& reader)
{
    if (!read_angle_min(reader)) {
        return false;
    }
    if (!read_angle_max(reader)) {
        return false;
    }
    if (!read_range_min(reader)) {
        return false;
    }
    if (!read_range_max(reader)) {
        return false;
    }
    if (!read_scans(reader)) {
        return false;
    }
    if (!read_status(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool LaserScan2DSerializer::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(6)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool LaserScan2DSerializer::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_angle_min(writer)) {
        return false;
    }
    if (!write_angle_max(writer)) {
        return false;
    }
    if (!write_range_min(writer)) {
        return false;
    }
    if (!write_range_max(writer)) {
        return false;
    }
    if (!write_scans(writer)) {
        return false;
    }
    if (!write_status(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool LaserScan2DSerializer::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(6)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string LaserScan2DSerializer::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read angle_min field
bool LaserScan2DSerializer::read_angle_min(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->angle_min)) {
        reader.fail();
        return false;
    }
    return true;
}

// write angle_min field
bool LaserScan2DSerializer::write_angle_min(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->angle_min)) {
        return false;
    }
    return true;
}

// read (nested) angle_min field
bool LaserScan2DSerializer::nested_read_angle_min(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->angle_min)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) angle_min field
bool LaserScan2DSerializer::nested_write_angle_min(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->angle_min)) {
        return false;
    }
    return true;
}

// read angle_max field
bool LaserScan2DSerializer::read_angle_max(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->angle_max)) {
        reader.fail();
        return false;
    }
    return true;
}

// write angle_max field
bool LaserScan2DSerializer::write_angle_max(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->angle_max)) {
        return false;
    }
    return true;
}

// read (nested) angle_max field
bool LaserScan2DSerializer::nested_read_angle_max(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->angle_max)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) angle_max field
bool LaserScan2DSerializer::nested_write_angle_max(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->angle_max)) {
        return false;
    }
    return true;
}

// read range_min field
bool LaserScan2DSerializer::read_range_min(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->range_min)) {
        reader.fail();
        return false;
    }
    return true;
}

// write range_min field
bool LaserScan2DSerializer::write_range_min(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->range_min)) {
        return false;
    }
    return true;
}

// read (nested) range_min field
bool LaserScan2DSerializer::nested_read_range_min(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->range_min)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) range_min field
bool LaserScan2DSerializer::nested_write_range_min(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->range_min)) {
        return false;
    }
    return true;
}

// read range_max field
bool LaserScan2DSerializer::read_range_max(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->range_max)) {
        reader.fail();
        return false;
    }
    return true;
}

// write range_max field
bool LaserScan2DSerializer::write_range_max(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->range_max)) {
        return false;
    }
    return true;
}

// read (nested) range_max field
bool LaserScan2DSerializer::nested_read_range_max(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->range_max)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) range_max field
bool LaserScan2DSerializer::nested_write_range_max(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->range_max)) {
        return false;
    }
    return true;
}

// read scans field
bool LaserScan2DSerializer::read_scans(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->scans.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->scans.data()), mStorage->scans.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write scans field
bool LaserScan2DSerializer::write_scans(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->scans.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->scans.data()), mStorage->scans.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) scans field
bool LaserScan2DSerializer::nested_read_scans(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    mStorage->scans.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(mStorage->scans.data()), mStorage->scans.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) scans field
bool LaserScan2DSerializer::nested_write_scans(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, mStorage->scans.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(mStorage->scans.data()), mStorage->scans.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read status field
bool LaserScan2DSerializer::read_status(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(mStorage->status)) {
        reader.fail();
        return false;
    }
    return true;
}

// write status field
bool LaserScan2DSerializer::write_status(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(mStorage->status)) {
        return false;
    }
    return true;
}

// read (nested) status field
bool LaserScan2DSerializer::nested_read_status(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(mStorage->status)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) status field
bool LaserScan2DSerializer::nested_write_status(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(mStorage->status)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev
