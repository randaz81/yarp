/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/dev/Nav2D/MobileBaseVelocitySerializer.h>

namespace yarp::dev::Nav2D {

// Read structure on a Wire
bool MobileBaseVelocitySerializer::read(yarp::os::idl::WireReader& reader)
{
    if (!read_vel_x(reader)) {
        return false;
    }
    if (!read_vel_y(reader)) {
        return false;
    }
    if (!read_vel_theta(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool MobileBaseVelocitySerializer::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(3)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool MobileBaseVelocitySerializer::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_vel_x(writer)) {
        return false;
    }
    if (!write_vel_y(writer)) {
        return false;
    }
    if (!write_vel_theta(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool MobileBaseVelocitySerializer::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string MobileBaseVelocitySerializer::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read vel_x field
bool MobileBaseVelocitySerializer::read_vel_x(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->vel_x)) {
        reader.fail();
        return false;
    }
    return true;
}

// write vel_x field
bool MobileBaseVelocitySerializer::write_vel_x(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->vel_x)) {
        return false;
    }
    return true;
}

// read (nested) vel_x field
bool MobileBaseVelocitySerializer::nested_read_vel_x(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->vel_x)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) vel_x field
bool MobileBaseVelocitySerializer::nested_write_vel_x(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->vel_x)) {
        return false;
    }
    return true;
}

// read vel_y field
bool MobileBaseVelocitySerializer::read_vel_y(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->vel_y)) {
        reader.fail();
        return false;
    }
    return true;
}

// write vel_y field
bool MobileBaseVelocitySerializer::write_vel_y(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->vel_y)) {
        return false;
    }
    return true;
}

// read (nested) vel_y field
bool MobileBaseVelocitySerializer::nested_read_vel_y(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->vel_y)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) vel_y field
bool MobileBaseVelocitySerializer::nested_write_vel_y(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->vel_y)) {
        return false;
    }
    return true;
}

// read vel_theta field
bool MobileBaseVelocitySerializer::read_vel_theta(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->vel_theta)) {
        reader.fail();
        return false;
    }
    return true;
}

// write vel_theta field
bool MobileBaseVelocitySerializer::write_vel_theta(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->vel_theta)) {
        return false;
    }
    return true;
}

// read (nested) vel_theta field
bool MobileBaseVelocitySerializer::nested_read_vel_theta(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(mStorage->vel_theta)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) vel_theta field
bool MobileBaseVelocitySerializer::nested_write_vel_theta(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(mStorage->vel_theta)) {
        return false;
    }
    return true;
}

} // namespace yarp::dev::Nav2D
