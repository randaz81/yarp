/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <ILocalization2DRPC.h>

#include <yarp/os/idl/WireTypes.h>

class ILocalization2DRPC_startLocalizationServiceRPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DRPC_startLocalizationServiceRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool ILocalization2DRPC_startLocalizationServiceRPC_helper::s_return_helper = {};

ILocalization2DRPC_startLocalizationServiceRPC_helper::ILocalization2DRPC_startLocalizationServiceRPC_helper()
{
    s_return_helper = {};
}

bool ILocalization2DRPC_startLocalizationServiceRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("startLocalizationServiceRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool ILocalization2DRPC_startLocalizationServiceRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DRPC_stopLocalizationServiceRPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DRPC_stopLocalizationServiceRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool ILocalization2DRPC_stopLocalizationServiceRPC_helper::s_return_helper = {};

ILocalization2DRPC_stopLocalizationServiceRPC_helper::ILocalization2DRPC_stopLocalizationServiceRPC_helper()
{
    s_return_helper = {};
}

bool ILocalization2DRPC_stopLocalizationServiceRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("stopLocalizationServiceRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool ILocalization2DRPC_stopLocalizationServiceRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DRPC_getLocalizationStatusRPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DRPC_getLocalizationStatusRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_getLocalizationStatusRPC s_return_helper;
};

thread_local return_getLocalizationStatusRPC ILocalization2DRPC_getLocalizationStatusRPC_helper::s_return_helper = {};

ILocalization2DRPC_getLocalizationStatusRPC_helper::ILocalization2DRPC_getLocalizationStatusRPC_helper()
{
}

bool ILocalization2DRPC_getLocalizationStatusRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getLocalizationStatusRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool ILocalization2DRPC_getLocalizationStatusRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DRPC_getEstimatedPosesRPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DRPC_getEstimatedPosesRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_getEstimatedPosesRPC s_return_helper;
};

thread_local return_getEstimatedPosesRPC ILocalization2DRPC_getEstimatedPosesRPC_helper::s_return_helper = {};

ILocalization2DRPC_getEstimatedPosesRPC_helper::ILocalization2DRPC_getEstimatedPosesRPC_helper()
{
}

bool ILocalization2DRPC_getEstimatedPosesRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getEstimatedPosesRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool ILocalization2DRPC_getEstimatedPosesRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DRPC_getCurrentPositionRPC1_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DRPC_getCurrentPositionRPC1_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_getCurrentPositionRPC1 s_return_helper;
};

thread_local return_getCurrentPositionRPC1 ILocalization2DRPC_getCurrentPositionRPC1_helper::s_return_helper = {};

ILocalization2DRPC_getCurrentPositionRPC1_helper::ILocalization2DRPC_getCurrentPositionRPC1_helper()
{
}

bool ILocalization2DRPC_getCurrentPositionRPC1_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getCurrentPositionRPC1", 1, 1)) {
        return false;
    }
    return true;
}

bool ILocalization2DRPC_getCurrentPositionRPC1_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DRPC_getCurrentPositionRPC2_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DRPC_getCurrentPositionRPC2_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_getCurrentPositionRPC2 s_return_helper;
};

thread_local return_getCurrentPositionRPC2 ILocalization2DRPC_getCurrentPositionRPC2_helper::s_return_helper = {};

ILocalization2DRPC_getCurrentPositionRPC2_helper::ILocalization2DRPC_getCurrentPositionRPC2_helper()
{
}

bool ILocalization2DRPC_getCurrentPositionRPC2_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getCurrentPositionRPC2", 1, 1)) {
        return false;
    }
    return true;
}

bool ILocalization2DRPC_getCurrentPositionRPC2_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DRPC_getEstimatedOdometryRPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DRPC_getEstimatedOdometryRPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_getEstimatedOdometryRPC s_return_helper;
};

thread_local return_getEstimatedOdometryRPC ILocalization2DRPC_getEstimatedOdometryRPC_helper::s_return_helper = {};

ILocalization2DRPC_getEstimatedOdometryRPC_helper::ILocalization2DRPC_getEstimatedOdometryRPC_helper()
{
}

bool ILocalization2DRPC_getEstimatedOdometryRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeTag("getEstimatedOdometryRPC", 1, 1)) {
        return false;
    }
    return true;
}

bool ILocalization2DRPC_getEstimatedOdometryRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DRPC_setInitialPoseRPC1_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DRPC_setInitialPoseRPC1_helper(const yarp::dev::Nav2D::Map2DLocation& loc);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    yarp::dev::Nav2D::Map2DLocation m_loc;

    thread_local static bool s_return_helper;
};

thread_local bool ILocalization2DRPC_setInitialPoseRPC1_helper::s_return_helper = {};

ILocalization2DRPC_setInitialPoseRPC1_helper::ILocalization2DRPC_setInitialPoseRPC1_helper(const yarp::dev::Nav2D::Map2DLocation& loc) :
        m_loc{loc}
{
    s_return_helper = {};
}

bool ILocalization2DRPC_setInitialPoseRPC1_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!writer.writeTag("setInitialPoseRPC1", 1, 1)) {
        return false;
    }
    if (!writer.write(m_loc)) {
        return false;
    }
    return true;
}

bool ILocalization2DRPC_setInitialPoseRPC1_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DRPC_setInitialPoseRPC2_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DRPC_setInitialPoseRPC2_helper(const yarp::dev::Nav2D::Map2DLocation& loc, const yarp::sig::Matrix& cov);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    yarp::dev::Nav2D::Map2DLocation m_loc;
    yarp::sig::Matrix m_cov;

    thread_local static bool s_return_helper;
};

thread_local bool ILocalization2DRPC_setInitialPoseRPC2_helper::s_return_helper = {};

ILocalization2DRPC_setInitialPoseRPC2_helper::ILocalization2DRPC_setInitialPoseRPC2_helper(const yarp::dev::Nav2D::Map2DLocation& loc, const yarp::sig::Matrix& cov) :
        m_loc{loc},
        m_cov{cov}
{
    s_return_helper = {};
}

bool ILocalization2DRPC_setInitialPoseRPC2_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(3)) {
        return false;
    }
    if (!writer.writeTag("setInitialPoseRPC2", 1, 1)) {
        return false;
    }
    if (!writer.write(m_loc)) {
        return false;
    }
    if (!writer.write(m_cov)) {
        return false;
    }
    return true;
}

bool ILocalization2DRPC_setInitialPoseRPC2_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
ILocalization2DRPC::ILocalization2DRPC()
{
    yarp().setOwner(*this);
}

bool ILocalization2DRPC::startLocalizationServiceRPC()
{
    ILocalization2DRPC_startLocalizationServiceRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ILocalization2DRPC::startLocalizationServiceRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DRPC_startLocalizationServiceRPC_helper::s_return_helper : bool{};
}

bool ILocalization2DRPC::stopLocalizationServiceRPC()
{
    ILocalization2DRPC_stopLocalizationServiceRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ILocalization2DRPC::stopLocalizationServiceRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DRPC_stopLocalizationServiceRPC_helper::s_return_helper : bool{};
}

return_getLocalizationStatusRPC ILocalization2DRPC::getLocalizationStatusRPC()
{
    ILocalization2DRPC_getLocalizationStatusRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getLocalizationStatusRPC ILocalization2DRPC::getLocalizationStatusRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DRPC_getLocalizationStatusRPC_helper::s_return_helper : return_getLocalizationStatusRPC{};
}

return_getEstimatedPosesRPC ILocalization2DRPC::getEstimatedPosesRPC()
{
    ILocalization2DRPC_getEstimatedPosesRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getEstimatedPosesRPC ILocalization2DRPC::getEstimatedPosesRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DRPC_getEstimatedPosesRPC_helper::s_return_helper : return_getEstimatedPosesRPC{};
}

return_getCurrentPositionRPC1 ILocalization2DRPC::getCurrentPositionRPC1()
{
    ILocalization2DRPC_getCurrentPositionRPC1_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getCurrentPositionRPC1 ILocalization2DRPC::getCurrentPositionRPC1()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DRPC_getCurrentPositionRPC1_helper::s_return_helper : return_getCurrentPositionRPC1{};
}

return_getCurrentPositionRPC2 ILocalization2DRPC::getCurrentPositionRPC2()
{
    ILocalization2DRPC_getCurrentPositionRPC2_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getCurrentPositionRPC2 ILocalization2DRPC::getCurrentPositionRPC2()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DRPC_getCurrentPositionRPC2_helper::s_return_helper : return_getCurrentPositionRPC2{};
}

return_getEstimatedOdometryRPC ILocalization2DRPC::getEstimatedOdometryRPC()
{
    ILocalization2DRPC_getEstimatedOdometryRPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_getEstimatedOdometryRPC ILocalization2DRPC::getEstimatedOdometryRPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DRPC_getEstimatedOdometryRPC_helper::s_return_helper : return_getEstimatedOdometryRPC{};
}

bool ILocalization2DRPC::setInitialPoseRPC1(const yarp::dev::Nav2D::Map2DLocation& loc)
{
    ILocalization2DRPC_setInitialPoseRPC1_helper helper{loc};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ILocalization2DRPC::setInitialPoseRPC1(const yarp::dev::Nav2D::Map2DLocation& loc)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DRPC_setInitialPoseRPC1_helper::s_return_helper : bool{};
}

bool ILocalization2DRPC::setInitialPoseRPC2(const yarp::dev::Nav2D::Map2DLocation& loc, const yarp::sig::Matrix& cov)
{
    ILocalization2DRPC_setInitialPoseRPC2_helper helper{loc, cov};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ILocalization2DRPC::setInitialPoseRPC2(const yarp::dev::Nav2D::Map2DLocation& loc, const yarp::sig::Matrix& cov)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DRPC_setInitialPoseRPC2_helper::s_return_helper : bool{};
}

// help method
std::vector<std::string> ILocalization2DRPC::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("startLocalizationServiceRPC");
        helpString.emplace_back("stopLocalizationServiceRPC");
        helpString.emplace_back("getLocalizationStatusRPC");
        helpString.emplace_back("getEstimatedPosesRPC");
        helpString.emplace_back("getCurrentPositionRPC1");
        helpString.emplace_back("getCurrentPositionRPC2");
        helpString.emplace_back("getEstimatedOdometryRPC");
        helpString.emplace_back("setInitialPoseRPC1");
        helpString.emplace_back("setInitialPoseRPC2");
        helpString.emplace_back("help");
    } else {
        if (functionName == "startLocalizationServiceRPC") {
            helpString.emplace_back("bool startLocalizationServiceRPC() ");
        }
        if (functionName == "stopLocalizationServiceRPC") {
            helpString.emplace_back("bool stopLocalizationServiceRPC() ");
        }
        if (functionName == "getLocalizationStatusRPC") {
            helpString.emplace_back("return_getLocalizationStatusRPC getLocalizationStatusRPC() ");
        }
        if (functionName == "getEstimatedPosesRPC") {
            helpString.emplace_back("return_getEstimatedPosesRPC getEstimatedPosesRPC() ");
        }
        if (functionName == "getCurrentPositionRPC1") {
            helpString.emplace_back("return_getCurrentPositionRPC1 getCurrentPositionRPC1() ");
        }
        if (functionName == "getCurrentPositionRPC2") {
            helpString.emplace_back("return_getCurrentPositionRPC2 getCurrentPositionRPC2() ");
        }
        if (functionName == "getEstimatedOdometryRPC") {
            helpString.emplace_back("return_getEstimatedOdometryRPC getEstimatedOdometryRPC() ");
        }
        if (functionName == "setInitialPoseRPC1") {
            helpString.emplace_back("bool setInitialPoseRPC1(const yarp::dev::Nav2D::Map2DLocation& loc) ");
        }
        if (functionName == "setInitialPoseRPC2") {
            helpString.emplace_back("bool setInitialPoseRPC2(const yarp::dev::Nav2D::Map2DLocation& loc, const yarp::sig::Matrix& cov) ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool ILocalization2DRPC::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "startLocalizationServiceRPC") {
            ILocalization2DRPC_startLocalizationServiceRPC_helper::s_return_helper = startLocalizationServiceRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(ILocalization2DRPC_startLocalizationServiceRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "stopLocalizationServiceRPC") {
            ILocalization2DRPC_stopLocalizationServiceRPC_helper::s_return_helper = stopLocalizationServiceRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(ILocalization2DRPC_stopLocalizationServiceRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getLocalizationStatusRPC") {
            ILocalization2DRPC_getLocalizationStatusRPC_helper::s_return_helper = getLocalizationStatusRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(ILocalization2DRPC_getLocalizationStatusRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getEstimatedPosesRPC") {
            ILocalization2DRPC_getEstimatedPosesRPC_helper::s_return_helper = getEstimatedPosesRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(ILocalization2DRPC_getEstimatedPosesRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getCurrentPositionRPC1") {
            ILocalization2DRPC_getCurrentPositionRPC1_helper::s_return_helper = getCurrentPositionRPC1();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(ILocalization2DRPC_getCurrentPositionRPC1_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getCurrentPositionRPC2") {
            ILocalization2DRPC_getCurrentPositionRPC2_helper::s_return_helper = getCurrentPositionRPC2();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(3)) {
                    return false;
                }
                if (!writer.write(ILocalization2DRPC_getCurrentPositionRPC2_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "getEstimatedOdometryRPC") {
            ILocalization2DRPC_getEstimatedOdometryRPC_helper::s_return_helper = getEstimatedOdometryRPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(ILocalization2DRPC_getEstimatedOdometryRPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "setInitialPoseRPC1") {
            yarp::dev::Nav2D::Map2DLocation loc;
            if (!reader.read(loc)) {
                reader.fail();
                return false;
            }
            ILocalization2DRPC_setInitialPoseRPC1_helper::s_return_helper = setInitialPoseRPC1(loc);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(ILocalization2DRPC_setInitialPoseRPC1_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "setInitialPoseRPC2") {
            yarp::dev::Nav2D::Map2DLocation loc;
            yarp::sig::Matrix cov;
            if (!reader.read(loc)) {
                reader.fail();
                return false;
            }
            if (!reader.read(cov)) {
                reader.fail();
                return false;
            }
            ILocalization2DRPC_setInitialPoseRPC2_helper::s_return_helper = setInitialPoseRPC2(loc, cov);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(ILocalization2DRPC_setInitialPoseRPC2_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
