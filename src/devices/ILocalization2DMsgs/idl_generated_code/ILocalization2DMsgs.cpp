/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <ILocalization2DMsgs.h>

#include <yarp/os/idl/WireTypes.h>

class ILocalization2DMsgs_start_localization_service_RPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DMsgs_start_localization_service_RPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool ILocalization2DMsgs_start_localization_service_RPC_helper::s_return_helper = {};

ILocalization2DMsgs_start_localization_service_RPC_helper::ILocalization2DMsgs_start_localization_service_RPC_helper()
{
    s_return_helper = {};
}

bool ILocalization2DMsgs_start_localization_service_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(4)) {
        return false;
    }
    if (!writer.writeTag("start_localization_service_RPC", 1, 4)) {
        return false;
    }
    return true;
}

bool ILocalization2DMsgs_start_localization_service_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DMsgs_stop_localization_service_RPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DMsgs_stop_localization_service_RPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static bool s_return_helper;
};

thread_local bool ILocalization2DMsgs_stop_localization_service_RPC_helper::s_return_helper = {};

ILocalization2DMsgs_stop_localization_service_RPC_helper::ILocalization2DMsgs_stop_localization_service_RPC_helper()
{
    s_return_helper = {};
}

bool ILocalization2DMsgs_stop_localization_service_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(4)) {
        return false;
    }
    if (!writer.writeTag("stop_localization_service_RPC", 1, 4)) {
        return false;
    }
    return true;
}

bool ILocalization2DMsgs_stop_localization_service_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DMsgs_get_localization_status_RPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DMsgs_get_localization_status_RPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_get_localization_status s_return_helper;
};

thread_local return_get_localization_status ILocalization2DMsgs_get_localization_status_RPC_helper::s_return_helper = {};

ILocalization2DMsgs_get_localization_status_RPC_helper::ILocalization2DMsgs_get_localization_status_RPC_helper()
{
}

bool ILocalization2DMsgs_get_localization_status_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(4)) {
        return false;
    }
    if (!writer.writeTag("get_localization_status_RPC", 1, 4)) {
        return false;
    }
    return true;
}

bool ILocalization2DMsgs_get_localization_status_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DMsgs_get_estimated_poses_RPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DMsgs_get_estimated_poses_RPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_get_estimated_poses s_return_helper;
};

thread_local return_get_estimated_poses ILocalization2DMsgs_get_estimated_poses_RPC_helper::s_return_helper = {};

ILocalization2DMsgs_get_estimated_poses_RPC_helper::ILocalization2DMsgs_get_estimated_poses_RPC_helper()
{
}

bool ILocalization2DMsgs_get_estimated_poses_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(4)) {
        return false;
    }
    if (!writer.writeTag("get_estimated_poses_RPC", 1, 4)) {
        return false;
    }
    return true;
}

bool ILocalization2DMsgs_get_estimated_poses_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DMsgs_get_current_position1_RPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DMsgs_get_current_position1_RPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_get_current_position1 s_return_helper;
};

thread_local return_get_current_position1 ILocalization2DMsgs_get_current_position1_RPC_helper::s_return_helper = {};

ILocalization2DMsgs_get_current_position1_RPC_helper::ILocalization2DMsgs_get_current_position1_RPC_helper()
{
}

bool ILocalization2DMsgs_get_current_position1_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(4)) {
        return false;
    }
    if (!writer.writeTag("get_current_position1_RPC", 1, 4)) {
        return false;
    }
    return true;
}

bool ILocalization2DMsgs_get_current_position1_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DMsgs_get_current_position2_RPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DMsgs_get_current_position2_RPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_get_current_position2 s_return_helper;
};

thread_local return_get_current_position2 ILocalization2DMsgs_get_current_position2_RPC_helper::s_return_helper = {};

ILocalization2DMsgs_get_current_position2_RPC_helper::ILocalization2DMsgs_get_current_position2_RPC_helper()
{
}

bool ILocalization2DMsgs_get_current_position2_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(4)) {
        return false;
    }
    if (!writer.writeTag("get_current_position2_RPC", 1, 4)) {
        return false;
    }
    return true;
}

bool ILocalization2DMsgs_get_current_position2_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DMsgs_get_estimated_odometry_RPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DMsgs_get_estimated_odometry_RPC_helper();
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    thread_local static return_get_estimated_odometry s_return_helper;
};

thread_local return_get_estimated_odometry ILocalization2DMsgs_get_estimated_odometry_RPC_helper::s_return_helper = {};

ILocalization2DMsgs_get_estimated_odometry_RPC_helper::ILocalization2DMsgs_get_estimated_odometry_RPC_helper()
{
}

bool ILocalization2DMsgs_get_estimated_odometry_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(4)) {
        return false;
    }
    if (!writer.writeTag("get_estimated_odometry_RPC", 1, 4)) {
        return false;
    }
    return true;
}

bool ILocalization2DMsgs_get_estimated_odometry_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.read(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DMsgs_set_initial_pose1_RPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DMsgs_set_initial_pose1_RPC_helper(const yarp::dev::Nav2D::Map2DLocation& loc);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    yarp::dev::Nav2D::Map2DLocation m_loc;

    thread_local static bool s_return_helper;
};

thread_local bool ILocalization2DMsgs_set_initial_pose1_RPC_helper::s_return_helper = {};

ILocalization2DMsgs_set_initial_pose1_RPC_helper::ILocalization2DMsgs_set_initial_pose1_RPC_helper(const yarp::dev::Nav2D::Map2DLocation& loc) :
        m_loc{loc}
{
    s_return_helper = {};
}

bool ILocalization2DMsgs_set_initial_pose1_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(5)) {
        return false;
    }
    if (!writer.writeTag("set_initial_pose1_RPC", 1, 4)) {
        return false;
    }
    if (!writer.write(m_loc)) {
        return false;
    }
    return true;
}

bool ILocalization2DMsgs_set_initial_pose1_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

class ILocalization2DMsgs_set_initial_pose2_RPC_helper :
        public yarp::os::Portable
{
public:
    explicit ILocalization2DMsgs_set_initial_pose2_RPC_helper(const yarp::dev::Nav2D::Map2DLocation& loc, const yarp::sig::Matrix& cov);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    yarp::dev::Nav2D::Map2DLocation m_loc;
    yarp::sig::Matrix m_cov;

    thread_local static bool s_return_helper;
};

thread_local bool ILocalization2DMsgs_set_initial_pose2_RPC_helper::s_return_helper = {};

ILocalization2DMsgs_set_initial_pose2_RPC_helper::ILocalization2DMsgs_set_initial_pose2_RPC_helper(const yarp::dev::Nav2D::Map2DLocation& loc, const yarp::sig::Matrix& cov) :
        m_loc{loc},
        m_cov{cov}
{
    s_return_helper = {};
}

bool ILocalization2DMsgs_set_initial_pose2_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(6)) {
        return false;
    }
    if (!writer.writeTag("set_initial_pose2_RPC", 1, 4)) {
        return false;
    }
    if (!writer.write(m_loc)) {
        return false;
    }
    if (!writer.write(m_cov)) {
        return false;
    }
    return true;
}

bool ILocalization2DMsgs_set_initial_pose2_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListReturn()) {
        return false;
    }
    if (!reader.readBool(s_return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

// Constructor
ILocalization2DMsgs::ILocalization2DMsgs()
{
    yarp().setOwner(*this);
}

bool ILocalization2DMsgs::start_localization_service_RPC()
{
    ILocalization2DMsgs_start_localization_service_RPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ILocalization2DMsgs::start_localization_service_RPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DMsgs_start_localization_service_RPC_helper::s_return_helper : bool{};
}

bool ILocalization2DMsgs::stop_localization_service_RPC()
{
    ILocalization2DMsgs_stop_localization_service_RPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ILocalization2DMsgs::stop_localization_service_RPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DMsgs_stop_localization_service_RPC_helper::s_return_helper : bool{};
}

return_get_localization_status ILocalization2DMsgs::get_localization_status_RPC()
{
    ILocalization2DMsgs_get_localization_status_RPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_get_localization_status ILocalization2DMsgs::get_localization_status_RPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DMsgs_get_localization_status_RPC_helper::s_return_helper : return_get_localization_status{};
}

return_get_estimated_poses ILocalization2DMsgs::get_estimated_poses_RPC()
{
    ILocalization2DMsgs_get_estimated_poses_RPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_get_estimated_poses ILocalization2DMsgs::get_estimated_poses_RPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DMsgs_get_estimated_poses_RPC_helper::s_return_helper : return_get_estimated_poses{};
}

return_get_current_position1 ILocalization2DMsgs::get_current_position1_RPC()
{
    ILocalization2DMsgs_get_current_position1_RPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_get_current_position1 ILocalization2DMsgs::get_current_position1_RPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DMsgs_get_current_position1_RPC_helper::s_return_helper : return_get_current_position1{};
}

return_get_current_position2 ILocalization2DMsgs::get_current_position2_RPC()
{
    ILocalization2DMsgs_get_current_position2_RPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_get_current_position2 ILocalization2DMsgs::get_current_position2_RPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DMsgs_get_current_position2_RPC_helper::s_return_helper : return_get_current_position2{};
}

return_get_estimated_odometry ILocalization2DMsgs::get_estimated_odometry_RPC()
{
    ILocalization2DMsgs_get_estimated_odometry_RPC_helper helper{};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "return_get_estimated_odometry ILocalization2DMsgs::get_estimated_odometry_RPC()");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DMsgs_get_estimated_odometry_RPC_helper::s_return_helper : return_get_estimated_odometry{};
}

bool ILocalization2DMsgs::set_initial_pose1_RPC(const yarp::dev::Nav2D::Map2DLocation& loc)
{
    ILocalization2DMsgs_set_initial_pose1_RPC_helper helper{loc};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ILocalization2DMsgs::set_initial_pose1_RPC(const yarp::dev::Nav2D::Map2DLocation& loc)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DMsgs_set_initial_pose1_RPC_helper::s_return_helper : bool{};
}

bool ILocalization2DMsgs::set_initial_pose2_RPC(const yarp::dev::Nav2D::Map2DLocation& loc, const yarp::sig::Matrix& cov)
{
    ILocalization2DMsgs_set_initial_pose2_RPC_helper helper{loc, cov};
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", "bool ILocalization2DMsgs::set_initial_pose2_RPC(const yarp::dev::Nav2D::Map2DLocation& loc, const yarp::sig::Matrix& cov)");
    }
    bool ok = yarp().write(helper, helper);
    return ok ? ILocalization2DMsgs_set_initial_pose2_RPC_helper::s_return_helper : bool{};
}

// help method
std::vector<std::string> ILocalization2DMsgs::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back("start_localization_service_RPC");
        helpString.emplace_back("stop_localization_service_RPC");
        helpString.emplace_back("get_localization_status_RPC");
        helpString.emplace_back("get_estimated_poses_RPC");
        helpString.emplace_back("get_current_position1_RPC");
        helpString.emplace_back("get_current_position2_RPC");
        helpString.emplace_back("get_estimated_odometry_RPC");
        helpString.emplace_back("set_initial_pose1_RPC");
        helpString.emplace_back("set_initial_pose2_RPC");
        helpString.emplace_back("help");
    } else {
        if (functionName == "start_localization_service_RPC") {
            helpString.emplace_back("bool start_localization_service_RPC() ");
        }
        if (functionName == "stop_localization_service_RPC") {
            helpString.emplace_back("bool stop_localization_service_RPC() ");
        }
        if (functionName == "get_localization_status_RPC") {
            helpString.emplace_back("return_get_localization_status get_localization_status_RPC() ");
        }
        if (functionName == "get_estimated_poses_RPC") {
            helpString.emplace_back("return_get_estimated_poses get_estimated_poses_RPC() ");
        }
        if (functionName == "get_current_position1_RPC") {
            helpString.emplace_back("return_get_current_position1 get_current_position1_RPC() ");
        }
        if (functionName == "get_current_position2_RPC") {
            helpString.emplace_back("return_get_current_position2 get_current_position2_RPC() ");
        }
        if (functionName == "get_estimated_odometry_RPC") {
            helpString.emplace_back("return_get_estimated_odometry get_estimated_odometry_RPC() ");
        }
        if (functionName == "set_initial_pose1_RPC") {
            helpString.emplace_back("bool set_initial_pose1_RPC(const yarp::dev::Nav2D::Map2DLocation& loc) ");
        }
        if (functionName == "set_initial_pose2_RPC") {
            helpString.emplace_back("bool set_initial_pose2_RPC(const yarp::dev::Nav2D::Map2DLocation& loc, const yarp::sig::Matrix& cov) ");
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool ILocalization2DMsgs::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag();
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag();
    }
    while (!reader.isError()) {
        if (tag == "start_localization_service_RPC") {
            ILocalization2DMsgs_start_localization_service_RPC_helper::s_return_helper = start_localization_service_RPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(ILocalization2DMsgs_start_localization_service_RPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "stop_localization_service_RPC") {
            ILocalization2DMsgs_stop_localization_service_RPC_helper::s_return_helper = stop_localization_service_RPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(ILocalization2DMsgs_stop_localization_service_RPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_localization_status_RPC") {
            ILocalization2DMsgs_get_localization_status_RPC_helper::s_return_helper = get_localization_status_RPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(ILocalization2DMsgs_get_localization_status_RPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_estimated_poses_RPC") {
            ILocalization2DMsgs_get_estimated_poses_RPC_helper::s_return_helper = get_estimated_poses_RPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(ILocalization2DMsgs_get_estimated_poses_RPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_current_position1_RPC") {
            ILocalization2DMsgs_get_current_position1_RPC_helper::s_return_helper = get_current_position1_RPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(ILocalization2DMsgs_get_current_position1_RPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_current_position2_RPC") {
            ILocalization2DMsgs_get_current_position2_RPC_helper::s_return_helper = get_current_position2_RPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(3)) {
                    return false;
                }
                if (!writer.write(ILocalization2DMsgs_get_current_position2_RPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "get_estimated_odometry_RPC") {
            ILocalization2DMsgs_get_estimated_odometry_RPC_helper::s_return_helper = get_estimated_odometry_RPC();
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.write(ILocalization2DMsgs_get_estimated_odometry_RPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_initial_pose1_RPC") {
            yarp::dev::Nav2D::Map2DLocation loc;
            if (!reader.read(loc)) {
                reader.fail();
                return false;
            }
            ILocalization2DMsgs_set_initial_pose1_RPC_helper::s_return_helper = set_initial_pose1_RPC(loc);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(ILocalization2DMsgs_set_initial_pose1_RPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "set_initial_pose2_RPC") {
            yarp::dev::Nav2D::Map2DLocation loc;
            yarp::sig::Matrix cov;
            if (!reader.read(loc)) {
                reader.fail();
                return false;
            }
            if (!reader.read(cov)) {
                reader.fail();
                return false;
            }
            ILocalization2DMsgs_set_initial_pose2_RPC_helper::s_return_helper = set_initial_pose2_RPC(loc, cov);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(1)) {
                    return false;
                }
                if (!writer.writeBool(ILocalization2DMsgs_set_initial_pose2_RPC_helper::s_return_helper)) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(BOTTLE_TAG_INT32, static_cast<uint32_t>(help_strings.size()))) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag();
        if (next_tag == "") {
            break;
        }
        tag.append("_").append(next_tag);
    }
    return false;
}
