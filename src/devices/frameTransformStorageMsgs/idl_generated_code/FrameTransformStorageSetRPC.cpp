/* t_yarp_generator::generate_service:3763 */
/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <FrameTransformStorageSetRPC.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

/* t_yarp_generator::generate_service:3859 */
/* t_yarp_generator::generate_service_helper_classes:3907 */
/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// setTransformsRPC helper class declaration
class FrameTransformStorageSetRPC_setTransformsRPC_helper :
        public yarp::os::Portable
{
public:
    FrameTransformStorageSetRPC_setTransformsRPC_helper() = default;
    explicit FrameTransformStorageSetRPC_setTransformsRPC_helper(const std::vector<yarp::math::FrameTransform>& transforms);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::vector<yarp::math::FrameTransform>& transforms);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::vector<yarp::math::FrameTransform> transforms{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::vector<yarp::math::FrameTransform>&);
    void call(FrameTransformStorageSetRPC* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setTransformsRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool FrameTransformStorageSetRPC::setTransformsRPC(const std::vector<yarp::math::FrameTransform>& transforms)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// setTransformRPC helper class declaration
class FrameTransformStorageSetRPC_setTransformRPC_helper :
        public yarp::os::Portable
{
public:
    FrameTransformStorageSetRPC_setTransformRPC_helper() = default;
    explicit FrameTransformStorageSetRPC_setTransformRPC_helper(const yarp::math::FrameTransform& transform);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const yarp::math::FrameTransform& transform);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        yarp::math::FrameTransform transform{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const yarp::math::FrameTransform&);
    void call(FrameTransformStorageSetRPC* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setTransformRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool FrameTransformStorageSetRPC::setTransformRPC(const yarp::math::FrameTransform& transform)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// deleteTransformRPC helper class declaration
class FrameTransformStorageSetRPC_deleteTransformRPC_helper :
        public yarp::os::Portable
{
public:
    FrameTransformStorageSetRPC_deleteTransformRPC_helper() = default;
    FrameTransformStorageSetRPC_deleteTransformRPC_helper(const std::string& src, const std::string& dst);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const std::string& src, const std::string& dst);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::string src{};
        std::string dst{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const std::string&, const std::string&);
    void call(FrameTransformStorageSetRPC* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"deleteTransformRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool FrameTransformStorageSetRPC::deleteTransformRPC(const std::string& src, const std::string& dst)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// clearAllRPC helper class declaration
class FrameTransformStorageSetRPC_clearAllRPC_helper :
        public yarp::os::Portable
{
public:
    FrameTransformStorageSetRPC_clearAllRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(FrameTransformStorageSetRPC* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"clearAllRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool FrameTransformStorageSetRPC::clearAllRPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// setTransformsRPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
FrameTransformStorageSetRPC_setTransformsRPC_helper::FrameTransformStorageSetRPC_setTransformsRPC_helper(const std::vector<yarp::math::FrameTransform>& transforms) :
        cmd{transforms}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
FrameTransformStorageSetRPC_setTransformsRPC_helper::Command::Command(const std::vector<yarp::math::FrameTransform>& transforms) :
        transforms{transforms}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_container:1315 */
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, transforms.size())) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    for (const auto& _item : transforms) {
/* t_yarp_generator::generate_serialize_list_element:1420 */
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
        const yarp::math::FrameTransformDataSerializer tmp_yarp_math_FrameTransformDataSerializer(_item);
        if (!writer.writeNested(tmp_yarp_math_FrameTransformDataSerializer)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_container:1649 */
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_LIST) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    transforms.resize(_csize);
    for (size_t _i = 0; _i < _csize; ++_i) {
/* t_yarp_generator::generate_deserialize_list_element:1793 */
/* t_yarp_generator::generate_deserialize_field:1449 */
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
/* t_yarp_generator::generate_deserialize_struct:1604 */
        yarp::math::FrameTransformDataSerializer tmp_yarp_math_FrameTransformDataSerializer(transforms[_i]);
        if (!reader.readNested(tmp_yarp_math_FrameTransformDataSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool FrameTransformStorageSetRPC_setTransformsRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void FrameTransformStorageSetRPC_setTransformsRPC_helper::call(FrameTransformStorageSetRPC* ptr)
{
    reply.return_helper = ptr->setTransformsRPC(cmd.transforms);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// setTransformRPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
FrameTransformStorageSetRPC_setTransformRPC_helper::FrameTransformStorageSetRPC_setTransformRPC_helper(const yarp::math::FrameTransform& transform) :
        cmd{transform}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
FrameTransformStorageSetRPC_setTransformRPC_helper::Command::Command(const yarp::math::FrameTransform& transform) :
        transform{transform}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
    const yarp::math::FrameTransformDataSerializer tmp_yarp_math_FrameTransformDataSerializer(transform);
    if (!writer.writeNested(tmp_yarp_math_FrameTransformDataSerializer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    yarp::math::FrameTransformDataSerializer tmp_yarp_math_FrameTransformDataSerializer(transform);
    if (!reader.readNested(tmp_yarp_math_FrameTransformDataSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool FrameTransformStorageSetRPC_setTransformRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void FrameTransformStorageSetRPC_setTransformRPC_helper::call(FrameTransformStorageSetRPC* ptr)
{
    reply.return_helper = ptr->setTransformRPC(cmd.transform);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// deleteTransformRPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
FrameTransformStorageSetRPC_deleteTransformRPC_helper::FrameTransformStorageSetRPC_deleteTransformRPC_helper(const std::string& src, const std::string& dst) :
        cmd{src, dst}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
FrameTransformStorageSetRPC_deleteTransformRPC_helper::Command::Command(const std::string& src, const std::string& dst) :
        src{src},
        dst{dst}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeString(src)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeString(dst)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(src)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(dst)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool FrameTransformStorageSetRPC_deleteTransformRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void FrameTransformStorageSetRPC_deleteTransformRPC_helper::call(FrameTransformStorageSetRPC* ptr)
{
    reply.return_helper = ptr->deleteTransformRPC(cmd.src, cmd.dst);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// clearAllRPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool FrameTransformStorageSetRPC_clearAllRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void FrameTransformStorageSetRPC_clearAllRPC_helper::call(FrameTransformStorageSetRPC* ptr)
{
    reply.return_helper = ptr->clearAllRPC();
}

/* t_yarp_generator::generate_service_constructor:4571 */
// Constructor
FrameTransformStorageSetRPC::FrameTransformStorageSetRPC()
{
    yarp().setOwner(*this);
}

/* t_yarp_generator::generate_service_method:4596 */
bool FrameTransformStorageSetRPC::setTransformsRPC(const std::vector<yarp::math::FrameTransform>& transforms)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameTransformStorageSetRPC_setTransformsRPC_helper::s_prototype);
    }
    FrameTransformStorageSetRPC_setTransformsRPC_helper helper{transforms};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool FrameTransformStorageSetRPC::setTransformRPC(const yarp::math::FrameTransform& transform)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameTransformStorageSetRPC_setTransformRPC_helper::s_prototype);
    }
    FrameTransformStorageSetRPC_setTransformRPC_helper helper{transform};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool FrameTransformStorageSetRPC::deleteTransformRPC(const std::string& src, const std::string& dst)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameTransformStorageSetRPC_deleteTransformRPC_helper::s_prototype);
    }
    FrameTransformStorageSetRPC_deleteTransformRPC_helper helper{src, dst};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool FrameTransformStorageSetRPC::clearAllRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameTransformStorageSetRPC_clearAllRPC_helper::s_prototype);
    }
    FrameTransformStorageSetRPC_clearAllRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_help:4649 */
// help method
std::vector<std::string> FrameTransformStorageSetRPC::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(FrameTransformStorageSetRPC_setTransformsRPC_helper::s_tag);
        helpString.emplace_back(FrameTransformStorageSetRPC_setTransformRPC_helper::s_tag);
        helpString.emplace_back(FrameTransformStorageSetRPC_deleteTransformRPC_helper::s_tag);
        helpString.emplace_back(FrameTransformStorageSetRPC_clearAllRPC_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == FrameTransformStorageSetRPC_setTransformsRPC_helper::s_tag) {
            helpString.emplace_back(FrameTransformStorageSetRPC_setTransformsRPC_helper::s_prototype);
        }
        if (functionName == FrameTransformStorageSetRPC_setTransformRPC_helper::s_tag) {
            helpString.emplace_back(FrameTransformStorageSetRPC_setTransformRPC_helper::s_prototype);
        }
        if (functionName == FrameTransformStorageSetRPC_deleteTransformRPC_helper::s_tag) {
            helpString.emplace_back(FrameTransformStorageSetRPC_deleteTransformRPC_helper::s_prototype);
        }
        if (functionName == FrameTransformStorageSetRPC_clearAllRPC_helper::s_tag) {
            helpString.emplace_back(FrameTransformStorageSetRPC_clearAllRPC_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

/* t_yarp_generator::generate_service_read:4731 */
// read from ConnectionReader
bool FrameTransformStorageSetRPC::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 1;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if (tag == FrameTransformStorageSetRPC_setTransformsRPC_helper::s_tag) {
            FrameTransformStorageSetRPC_setTransformsRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameTransformStorageSetRPC_setTransformRPC_helper::s_tag) {
            FrameTransformStorageSetRPC_setTransformRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameTransformStorageSetRPC_deleteTransformRPC_helper::s_tag) {
            FrameTransformStorageSetRPC_deleteTransformRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameTransformStorageSetRPC_clearAllRPC_helper::s_tag) {
            FrameTransformStorageSetRPC_clearAllRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
