/* t_yarp_generator::generate_service:3763 */
/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <INavigation2DMsgs.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

/* t_yarp_generator::generate_service:3859 */
/* t_yarp_generator::generate_service_helper_classes:3907 */
/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// stop_navigation_RPC helper class declaration
class INavigation2DMsgs_stop_navigation_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_stop_navigation_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"stop_navigation_RPC"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool INavigation2DMsgs::stop_navigation_RPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// resume_navigation_RPC helper class declaration
class INavigation2DMsgs_resume_navigation_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_resume_navigation_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"resume_navigation_RPC"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool INavigation2DMsgs::resume_navigation_RPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// suspend_navigation_RPC helper class declaration
class INavigation2DMsgs_suspend_navigation_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_suspend_navigation_RPC_helper() = default;
    explicit INavigation2DMsgs_suspend_navigation_RPC_helper(const double time_s);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const double time_s);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double time_s{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double);
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"suspend_navigation_RPC"};
    static constexpr size_t s_tag_len{3};
    static constexpr size_t s_cmd_len{4};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool INavigation2DMsgs::suspend_navigation_RPC(const double time_s)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// recompute_current_navigation_path_RPC helper class declaration
class INavigation2DMsgs_recompute_current_navigation_path_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_recompute_current_navigation_path_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)();
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"recompute_current_navigation_path_RPC"};
    static constexpr size_t s_tag_len{5};
    static constexpr size_t s_cmd_len{5};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool INavigation2DMsgs::recompute_current_navigation_path_RPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// get_navigation_status_RPC helper class declaration
class INavigation2DMsgs_get_navigation_status_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_get_navigation_status_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_navigation_statusStorage return_helper{};
    };

    using funcptr_t = return_get_navigation_statusStorage (*)();
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_navigation_status_RPC"};
    static constexpr size_t s_tag_len{4};
    static constexpr size_t s_cmd_len{4};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_get_navigation_statusStorage INavigation2DMsgs::get_navigation_status_RPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// get_current_nav_waypoint_RPC helper class declaration
class INavigation2DMsgs_get_current_nav_waypoint_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_get_current_nav_waypoint_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_current_nav_waypointStorage return_helper{};
    };

    using funcptr_t = return_get_current_nav_waypointStorage (*)();
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_current_nav_waypoint_RPC"};
    static constexpr size_t s_tag_len{5};
    static constexpr size_t s_cmd_len{5};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_get_current_nav_waypointStorage INavigation2DMsgs::get_current_nav_waypoint_RPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// get_all_navigation_waypoints_RPC helper class declaration
class INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper() = default;
    explicit INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper(const yarp::dev::Nav2D::TrajectoryTypeEnum trajectory_type);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const yarp::dev::Nav2D::TrajectoryTypeEnum trajectory_type);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        yarp::dev::Nav2D::TrajectoryTypeEnum trajectory_type{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_all_nav_waypointsStorage return_helper{};
    };

    using funcptr_t = return_get_all_nav_waypointsStorage (*)(const yarp::dev::Nav2D::TrajectoryTypeEnum);
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_all_navigation_waypoints_RPC"};
    static constexpr size_t s_tag_len{5};
    static constexpr size_t s_cmd_len{6};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_get_all_nav_waypointsStorage INavigation2DMsgs::get_all_navigation_waypoints_RPC(const yarp::dev::Nav2D::TrajectoryTypeEnum trajectory_type)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// get_current_navigation_map_RPC helper class declaration
class INavigation2DMsgs_get_current_navigation_map_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_get_current_navigation_map_RPC_helper() = default;
    explicit INavigation2DMsgs_get_current_navigation_map_RPC_helper(const yarp::dev::Nav2D::NavigationMapTypeEnum map_type);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const yarp::dev::Nav2D::NavigationMapTypeEnum map_type);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        yarp::dev::Nav2D::NavigationMapTypeEnum map_type{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_current_nav_mapStorage return_helper{};
    };

    using funcptr_t = return_get_current_nav_mapStorage (*)(const yarp::dev::Nav2D::NavigationMapTypeEnum);
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_current_navigation_map_RPC"};
    static constexpr size_t s_tag_len{5};
    static constexpr size_t s_cmd_len{6};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_get_current_nav_mapStorage INavigation2DMsgs::get_current_navigation_map_RPC(const yarp::dev::Nav2D::NavigationMapTypeEnum map_type)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// goto_target_by_absolute_location_RPC helper class declaration
class INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper() = default;
    explicit INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper(const yarp::dev::Nav2D::Map2DLocation& loc);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const yarp::dev::Nav2D::Map2DLocation& loc);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        yarp::dev::Nav2D::Map2DLocation loc{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const yarp::dev::Nav2D::Map2DLocation&);
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"goto_target_by_absolute_location_RPC"};
    static constexpr size_t s_tag_len{6};
    static constexpr size_t s_cmd_len{7};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool INavigation2DMsgs::goto_target_by_absolute_location_RPC(const yarp::dev::Nav2D::Map2DLocation& loc)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// goto_target_by_relative_location1_RPC helper class declaration
class INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper() = default;
    INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper(const double x, const double y);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double x, const double y);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double x{0.0};
        double y{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double);
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"goto_target_by_relative_location1_RPC"};
    static constexpr size_t s_tag_len{6};
    static constexpr size_t s_cmd_len{8};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool INavigation2DMsgs::goto_target_by_relative_location1_RPC(const double x, const double y)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// goto_target_by_relative_location2_RPC helper class declaration
class INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper() = default;
    INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper(const double x, const double y, const double theta);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double x, const double y, const double theta);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double x{0.0};
        double y{0.0};
        double theta{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double, const double);
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"goto_target_by_relative_location2_RPC"};
    static constexpr size_t s_tag_len{6};
    static constexpr size_t s_cmd_len{9};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool INavigation2DMsgs::goto_target_by_relative_location2_RPC(const double x, const double y, const double theta)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// get_absolute_location_of_current_target_RPC helper class declaration
class INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_abs_loc_of_curr_targetStorage return_helper{};
    };

    using funcptr_t = return_get_abs_loc_of_curr_targetStorage (*)();
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_absolute_location_of_current_target_RPC"};
    static constexpr size_t s_tag_len{7};
    static constexpr size_t s_cmd_len{7};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_get_abs_loc_of_curr_targetStorage INavigation2DMsgs::get_absolute_location_of_current_target_RPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// get_relative_location_of_current_target_RPC helper class declaration
class INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_rel_loc_of_curr_targetStorage return_helper{};
    };

    using funcptr_t = return_get_rel_loc_of_curr_targetStorage (*)();
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_relative_location_of_current_target_RPC"};
    static constexpr size_t s_tag_len{7};
    static constexpr size_t s_cmd_len{7};
    static constexpr size_t s_reply_len{4};
    static constexpr const char* s_prototype{"return_get_rel_loc_of_curr_targetStorage INavigation2DMsgs::get_relative_location_of_current_target_RPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// goto_target_by_absolute_location_and_set_name_RPC helper class declaration
class INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper() = default;
    INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper(const yarp::dev::Nav2D::Map2DLocation& loc, const std::string& name);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const yarp::dev::Nav2D::Map2DLocation& loc, const std::string& name);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        yarp::dev::Nav2D::Map2DLocation loc{};
        std::string name{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const yarp::dev::Nav2D::Map2DLocation&, const std::string&);
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"goto_target_by_absolute_location_and_set_name_RPC"};
    static constexpr size_t s_tag_len{9};
    static constexpr size_t s_cmd_len{11};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool INavigation2DMsgs::goto_target_by_absolute_location_and_set_name_RPC(const yarp::dev::Nav2D::Map2DLocation& loc, const std::string& name)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// apply_velocity_command_RPC helper class declaration
class INavigation2DMsgs_apply_velocity_command_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_apply_velocity_command_RPC_helper() = default;
    INavigation2DMsgs_apply_velocity_command_RPC_helper(const double x_vel, const double y_vel, const double theta_vel, const double timeout);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double x_vel, const double y_vel, const double theta_vel, const double timeout);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double x_vel{0.0};
        double y_vel{0.0};
        double theta_vel{0.0};
        double timeout{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        bool return_helper{false};
    };

    using funcptr_t = bool (*)(const double, const double, const double, const double);
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"apply_velocity_command_RPC"};
    static constexpr size_t s_tag_len{4};
    static constexpr size_t s_cmd_len{8};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"bool INavigation2DMsgs::apply_velocity_command_RPC(const double x_vel, const double y_vel, const double theta_vel, const double timeout)"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// get_last_velocity_command_RPC helper class declaration
class INavigation2DMsgs_get_last_velocity_command_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_get_last_velocity_command_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_last_velocity_commandStorage return_helper{};
    };

    using funcptr_t = return_get_last_velocity_commandStorage (*)();
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_last_velocity_command_RPC"};
    static constexpr size_t s_tag_len{5};
    static constexpr size_t s_cmd_len{5};
    static constexpr size_t s_reply_len{4};
    static constexpr const char* s_prototype{"return_get_last_velocity_commandStorage INavigation2DMsgs::get_last_velocity_command_RPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_decl:3924 */
// get_name_of_current_target_RPC helper class declaration
class INavigation2DMsgs_get_name_of_current_target_RPC_helper :
        public yarp::os::Portable
{
public:
    INavigation2DMsgs_get_name_of_current_target_RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        return_get_name_of_current_targetStorage return_helper{};
    };

    using funcptr_t = return_get_name_of_current_targetStorage (*)();
    void call(INavigation2DMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"get_name_of_current_target_RPC"};
    static constexpr size_t s_tag_len{6};
    static constexpr size_t s_cmd_len{6};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"return_get_name_of_current_targetStorage INavigation2DMsgs::get_name_of_current_target_RPC()"};
    static constexpr const char* s_help{""};
};

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// stop_navigation_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_stop_navigation_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_stop_navigation_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->stop_navigation_RPC();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// resume_navigation_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_resume_navigation_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_resume_navigation_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->resume_navigation_RPC();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// suspend_navigation_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
INavigation2DMsgs_suspend_navigation_RPC_helper::INavigation2DMsgs_suspend_navigation_RPC_helper(const double time_s) :
        cmd{time_s}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
INavigation2DMsgs_suspend_navigation_RPC_helper::Command::Command(const double time_s) :
        time_s{time_s}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(time_s)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(time_s)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_suspend_navigation_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_suspend_navigation_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->suspend_navigation_RPC(cmd.time_s);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// recompute_current_navigation_path_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->recompute_current_navigation_path_RPC();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// get_navigation_status_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
        const return_get_navigation_statusSerializer tmp_return_get_navigation_statusSerializer(return_helper);
        if (!writer.write(tmp_return_get_navigation_statusSerializer)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_get_navigation_status_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    return_get_navigation_statusSerializer tmp_return_get_navigation_statusSerializer(return_helper);
    if (!reader.read(tmp_return_get_navigation_statusSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_get_navigation_status_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->get_navigation_status_RPC();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// get_current_nav_waypoint_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
        const return_get_current_nav_waypointSerializer tmp_return_get_current_nav_waypointSerializer(return_helper);
        if (!writer.write(tmp_return_get_current_nav_waypointSerializer)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    return_get_current_nav_waypointSerializer tmp_return_get_current_nav_waypointSerializer(return_helper);
    if (!reader.read(tmp_return_get_current_nav_waypointSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->get_current_nav_waypoint_RPC();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// get_all_navigation_waypoints_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper(const yarp::dev::Nav2D::TrajectoryTypeEnum trajectory_type) :
        cmd{trajectory_type}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Command::Command(const yarp::dev::Nav2D::TrajectoryTypeEnum trajectory_type) :
        trajectory_type{trajectory_type}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeVocab32(static_cast<yarp::conf::vocab32_t>(trajectory_type))) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    yarp::conf::vocab32_t _ecast;
    if (!reader.readVocab32(_ecast)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    trajectory_type = static_cast<yarp::dev::Nav2D::TrajectoryTypeEnum>(_ecast);
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
        const return_get_all_nav_waypointsSerializer tmp_return_get_all_nav_waypointsSerializer(return_helper);
        if (!writer.write(tmp_return_get_all_nav_waypointsSerializer)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    return_get_all_nav_waypointsSerializer tmp_return_get_all_nav_waypointsSerializer(return_helper);
    if (!reader.read(tmp_return_get_all_nav_waypointsSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->get_all_navigation_waypoints_RPC(cmd.trajectory_type);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// get_current_navigation_map_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
INavigation2DMsgs_get_current_navigation_map_RPC_helper::INavigation2DMsgs_get_current_navigation_map_RPC_helper(const yarp::dev::Nav2D::NavigationMapTypeEnum map_type) :
        cmd{map_type}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
INavigation2DMsgs_get_current_navigation_map_RPC_helper::Command::Command(const yarp::dev::Nav2D::NavigationMapTypeEnum map_type) :
        map_type{map_type}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeVocab32(static_cast<yarp::conf::vocab32_t>(map_type))) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    yarp::conf::vocab32_t _ecast;
    if (!reader.readVocab32(_ecast)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    map_type = static_cast<yarp::dev::Nav2D::NavigationMapTypeEnum>(_ecast);
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
        const return_get_current_nav_mapSerializer tmp_return_get_current_nav_mapSerializer(return_helper);
        if (!writer.write(tmp_return_get_current_nav_mapSerializer)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_get_current_navigation_map_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    return_get_current_nav_mapSerializer tmp_return_get_current_nav_mapSerializer(return_helper);
    if (!reader.read(tmp_return_get_current_nav_mapSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_get_current_navigation_map_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->get_current_navigation_map_RPC(cmd.map_type);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// goto_target_by_absolute_location_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper(const yarp::dev::Nav2D::Map2DLocation& loc) :
        cmd{loc}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Command::Command(const yarp::dev::Nav2D::Map2DLocation& loc) :
        loc{loc}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
    const yarp::dev::Nav2D::Map2DLocationDataSerializer tmp_yarp_dev_Nav2D_Map2DLocationDataSerializer(loc);
    if (!writer.writeNested(tmp_yarp_dev_Nav2D_Map2DLocationDataSerializer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    yarp::dev::Nav2D::Map2DLocationDataSerializer tmp_yarp_dev_Nav2D_Map2DLocationDataSerializer(loc);
    if (!reader.readNested(tmp_yarp_dev_Nav2D_Map2DLocationDataSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->goto_target_by_absolute_location_RPC(cmd.loc);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// goto_target_by_relative_location1_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper(const double x, const double y) :
        cmd{x, y}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Command::Command(const double x, const double y) :
        x{x},
        y{y}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(x)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(y)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->goto_target_by_relative_location1_RPC(cmd.x, cmd.y);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// goto_target_by_relative_location2_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper(const double x, const double y, const double theta) :
        cmd{x, y, theta}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Command::Command(const double x, const double y, const double theta) :
        x{x},
        y{y},
        theta{theta}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(x)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(y)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(theta)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(theta)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->goto_target_by_relative_location2_RPC(cmd.x, cmd.y, cmd.theta);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// get_absolute_location_of_current_target_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
        const return_get_abs_loc_of_curr_targetSerializer tmp_return_get_abs_loc_of_curr_targetSerializer(return_helper);
        if (!writer.write(tmp_return_get_abs_loc_of_curr_targetSerializer)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    return_get_abs_loc_of_curr_targetSerializer tmp_return_get_abs_loc_of_curr_targetSerializer(return_helper);
    if (!reader.read(tmp_return_get_abs_loc_of_curr_targetSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->get_absolute_location_of_current_target_RPC();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// get_relative_location_of_current_target_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
        const return_get_rel_loc_of_curr_targetSerializer tmp_return_get_rel_loc_of_curr_targetSerializer(return_helper);
        if (!writer.write(tmp_return_get_rel_loc_of_curr_targetSerializer)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    return_get_rel_loc_of_curr_targetSerializer tmp_return_get_rel_loc_of_curr_targetSerializer(return_helper);
    if (!reader.read(tmp_return_get_rel_loc_of_curr_targetSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->get_relative_location_of_current_target_RPC();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// goto_target_by_absolute_location_and_set_name_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper(const yarp::dev::Nav2D::Map2DLocation& loc, const std::string& name) :
        cmd{loc, name}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Command::Command(const yarp::dev::Nav2D::Map2DLocation& loc, const std::string& name) :
        loc{loc},
        name{name}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
    const yarp::dev::Nav2D::Map2DLocationDataSerializer tmp_yarp_dev_Nav2D_Map2DLocationDataSerializer(loc);
    if (!writer.writeNested(tmp_yarp_dev_Nav2D_Map2DLocationDataSerializer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeString(name)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    yarp::dev::Nav2D::Map2DLocationDataSerializer tmp_yarp_dev_Nav2D_Map2DLocationDataSerializer(loc);
    if (!reader.readNested(tmp_yarp_dev_Nav2D_Map2DLocationDataSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(name)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->goto_target_by_absolute_location_and_set_name_RPC(cmd.loc, cmd.name);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// apply_velocity_command_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_ctor:4109 */
INavigation2DMsgs_apply_velocity_command_RPC_helper::INavigation2DMsgs_apply_velocity_command_RPC_helper(const double x_vel, const double y_vel, const double theta_vel, const double timeout) :
        cmd{x_vel, y_vel, theta_vel, timeout}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_ctor:4156 */
INavigation2DMsgs_apply_velocity_command_RPC_helper::Command::Command(const double x_vel, const double y_vel, const double theta_vel, const double timeout) :
        x_vel{x_vel},
        y_vel{y_vel},
        theta_vel{theta_vel},
        timeout{timeout}
{
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(x_vel)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(y_vel)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(theta_vel)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_serialize_field:1146 */
    if (!writer.writeFloat64(timeout)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(x_vel)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(y_vel)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(theta_vel)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(timeout)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
        if (!writer.writeBool(return_helper)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_apply_velocity_command_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(return_helper)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_apply_velocity_command_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->apply_velocity_command_RPC(cmd.x_vel, cmd.y_vel, cmd.theta_vel, cmd.timeout);
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// get_last_velocity_command_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
        const return_get_last_velocity_commandSerializer tmp_return_get_last_velocity_commandSerializer(return_helper);
        if (!writer.write(tmp_return_get_last_velocity_commandSerializer)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_get_last_velocity_command_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    return_get_last_velocity_commandSerializer tmp_return_get_last_velocity_commandSerializer(return_helper);
    if (!reader.read(tmp_return_get_last_velocity_commandSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_get_last_velocity_command_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->get_last_velocity_command_RPC();
}

/* t_yarp_generator::generate_service_helper_classes_impl:4070 */
// get_name_of_current_target_RPC helper class implementation
/* t_yarp_generator::generate_service_helper_classes_impl_write:4136 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_read:4184 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_connectionwriter:4204 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_connectionreader:4226 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_write_wirewriter:4256 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!writeArgs(writer)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writetag:4278 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_writeargs:4299 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_read_wirereader:4327 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (!readArgs(reader)) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readtag:4347 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_command_readargs:4375 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_connectionwriter:4405 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_connectionreader:4426 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_write_wirewriter:4447 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
/* t_yarp_generator::generate_serialize_field:1146 */
/* t_yarp_generator::generate_serialize_struct:1268 */
        const return_get_name_of_current_targetSerializer tmp_return_get_name_of_current_targetSerializer(return_helper);
        if (!writer.write(tmp_return_get_name_of_current_targetSerializer)) {
            yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
            return false;
        }
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_reply_read_wirereader:4493 */
bool INavigation2DMsgs_get_name_of_current_target_RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
        return false;
    }
/* t_yarp_generator::generate_deserialize_field:1449 */
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
/* t_yarp_generator::generate_deserialize_struct:1604 */
    return_get_name_of_current_targetSerializer tmp_return_get_name_of_current_targetSerializer(return_helper);
    if (!reader.read(tmp_return_get_name_of_current_targetSerializer)) {
/* t_yarp_generator::generate_deserialize_field_fallback:1432 */
        reader.fail();
        return false;
    }
    return true;
}

/* t_yarp_generator::generate_service_helper_classes_impl_call:4531 */
void INavigation2DMsgs_get_name_of_current_target_RPC_helper::call(INavigation2DMsgs* ptr)
{
    reply.return_helper = ptr->get_name_of_current_target_RPC();
}

/* t_yarp_generator::generate_service_constructor:4571 */
// Constructor
INavigation2DMsgs::INavigation2DMsgs()
{
    yarp().setOwner(*this);
}

/* t_yarp_generator::generate_service_method:4596 */
bool INavigation2DMsgs::stop_navigation_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_stop_navigation_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_stop_navigation_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool INavigation2DMsgs::resume_navigation_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_resume_navigation_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_resume_navigation_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool INavigation2DMsgs::suspend_navigation_RPC(const double time_s)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_suspend_navigation_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_suspend_navigation_RPC_helper helper{time_s};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool INavigation2DMsgs::recompute_current_navigation_path_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_recompute_current_navigation_path_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
return_get_navigation_statusStorage INavigation2DMsgs::get_navigation_status_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_get_navigation_status_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_get_navigation_status_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_navigation_statusStorage{};
}

/* t_yarp_generator::generate_service_method:4596 */
return_get_current_nav_waypointStorage INavigation2DMsgs::get_current_nav_waypoint_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_get_current_nav_waypoint_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_current_nav_waypointStorage{};
}

/* t_yarp_generator::generate_service_method:4596 */
return_get_all_nav_waypointsStorage INavigation2DMsgs::get_all_navigation_waypoints_RPC(const yarp::dev::Nav2D::TrajectoryTypeEnum trajectory_type)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper helper{trajectory_type};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_all_nav_waypointsStorage{};
}

/* t_yarp_generator::generate_service_method:4596 */
return_get_current_nav_mapStorage INavigation2DMsgs::get_current_navigation_map_RPC(const yarp::dev::Nav2D::NavigationMapTypeEnum map_type)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_get_current_navigation_map_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_get_current_navigation_map_RPC_helper helper{map_type};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_current_nav_mapStorage{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool INavigation2DMsgs::goto_target_by_absolute_location_RPC(const yarp::dev::Nav2D::Map2DLocation& loc)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper helper{loc};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool INavigation2DMsgs::goto_target_by_relative_location1_RPC(const double x, const double y)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper helper{x, y};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool INavigation2DMsgs::goto_target_by_relative_location2_RPC(const double x, const double y, const double theta)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper helper{x, y, theta};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
return_get_abs_loc_of_curr_targetStorage INavigation2DMsgs::get_absolute_location_of_current_target_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_abs_loc_of_curr_targetStorage{};
}

/* t_yarp_generator::generate_service_method:4596 */
return_get_rel_loc_of_curr_targetStorage INavigation2DMsgs::get_relative_location_of_current_target_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_rel_loc_of_curr_targetStorage{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool INavigation2DMsgs::goto_target_by_absolute_location_and_set_name_RPC(const yarp::dev::Nav2D::Map2DLocation& loc, const std::string& name)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper helper{loc, name};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
bool INavigation2DMsgs::apply_velocity_command_RPC(const double x_vel, const double y_vel, const double theta_vel, const double timeout)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_apply_velocity_command_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_apply_velocity_command_RPC_helper helper{x_vel, y_vel, theta_vel, timeout};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : bool{};
}

/* t_yarp_generator::generate_service_method:4596 */
return_get_last_velocity_commandStorage INavigation2DMsgs::get_last_velocity_command_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_get_last_velocity_command_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_get_last_velocity_command_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_last_velocity_commandStorage{};
}

/* t_yarp_generator::generate_service_method:4596 */
return_get_name_of_current_targetStorage INavigation2DMsgs::get_name_of_current_target_RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", INavigation2DMsgs_get_name_of_current_target_RPC_helper::s_prototype);
    }
    INavigation2DMsgs_get_name_of_current_target_RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : return_get_name_of_current_targetStorage{};
}

/* t_yarp_generator::generate_service_help:4649 */
// help method
std::vector<std::string> INavigation2DMsgs::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(INavigation2DMsgs_stop_navigation_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_resume_navigation_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_suspend_navigation_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_get_navigation_status_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_get_current_navigation_map_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_apply_velocity_command_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_get_last_velocity_command_RPC_helper::s_tag);
        helpString.emplace_back(INavigation2DMsgs_get_name_of_current_target_RPC_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == INavigation2DMsgs_stop_navigation_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_stop_navigation_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_resume_navigation_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_resume_navigation_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_suspend_navigation_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_suspend_navigation_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_get_navigation_status_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_get_navigation_status_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_get_current_navigation_map_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_get_current_navigation_map_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_apply_velocity_command_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_apply_velocity_command_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_get_last_velocity_command_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_get_last_velocity_command_RPC_helper::s_prototype);
        }
        if (functionName == INavigation2DMsgs_get_name_of_current_target_RPC_helper::s_tag) {
            helpString.emplace_back(INavigation2DMsgs_get_name_of_current_target_RPC_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

/* t_yarp_generator::generate_service_read:4731 */
// read from ConnectionReader
bool INavigation2DMsgs::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 9;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if (tag == INavigation2DMsgs_stop_navigation_RPC_helper::s_tag) {
            INavigation2DMsgs_stop_navigation_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_resume_navigation_RPC_helper::s_tag) {
            INavigation2DMsgs_resume_navigation_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_suspend_navigation_RPC_helper::s_tag) {
            INavigation2DMsgs_suspend_navigation_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_recompute_current_navigation_path_RPC_helper::s_tag) {
            INavigation2DMsgs_recompute_current_navigation_path_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_get_navigation_status_RPC_helper::s_tag) {
            INavigation2DMsgs_get_navigation_status_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_get_current_nav_waypoint_RPC_helper::s_tag) {
            INavigation2DMsgs_get_current_nav_waypoint_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper::s_tag) {
            INavigation2DMsgs_get_all_navigation_waypoints_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_get_current_navigation_map_RPC_helper::s_tag) {
            INavigation2DMsgs_get_current_navigation_map_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper::s_tag) {
            INavigation2DMsgs_goto_target_by_absolute_location_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper::s_tag) {
            INavigation2DMsgs_goto_target_by_relative_location1_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper::s_tag) {
            INavigation2DMsgs_goto_target_by_relative_location2_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper::s_tag) {
            INavigation2DMsgs_get_absolute_location_of_current_target_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper::s_tag) {
            INavigation2DMsgs_get_relative_location_of_current_target_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper::s_tag) {
            INavigation2DMsgs_goto_target_by_absolute_location_and_set_name_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_apply_velocity_command_RPC_helper::s_tag) {
            INavigation2DMsgs_apply_velocity_command_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_get_last_velocity_command_RPC_helper::s_tag) {
            INavigation2DMsgs_get_last_velocity_command_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == INavigation2DMsgs_get_name_of_current_target_RPC_helper::s_tag) {
            INavigation2DMsgs_get_name_of_current_target_RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    yWarning("%s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
