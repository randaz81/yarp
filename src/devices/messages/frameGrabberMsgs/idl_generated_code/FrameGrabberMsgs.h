/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_FRAMEGRABBERMSGS_H
#define YARP_THRIFT_GENERATOR_SERVICE_FRAMEGRABBERMSGS_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <yarp/os/ApplicationNetworkProtocolVersion.h>
#include <IFrameGrabberControlDC1394Msgs_return_getBytesPerPacketDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getColorCodingDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getColorCodingMaskDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getFPSDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getFPSMaskDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getFormat7MaxWindowDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getFormat7WindowDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getISOSpeedDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getOperationModeDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getTransmissionDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getVideoModeDC1394.h>
#include <IFrameGrabberControlDC1394Msgs_return_getVideoModeMaskDC1394.h>
#include <IFrameGrabberControlMsgs_return_getActive.h>
#include <IFrameGrabberControlMsgs_return_getCameraDescription.h>
#include <IFrameGrabberControlMsgs_return_getFeature1.h>
#include <IFrameGrabberControlMsgs_return_getFeature2.h>
#include <IFrameGrabberControlMsgs_return_getMode.h>
#include <IFrameGrabberControlMsgs_return_hasAuto.h>
#include <IFrameGrabberControlMsgs_return_hasFeature.h>
#include <IFrameGrabberControlMsgs_return_hasManual.h>
#include <IFrameGrabberControlMsgs_return_hasOnOff.h>
#include <IFrameGrabberControlMsgs_return_hasOnePush.h>
#include <IFrameGrabberImageOf_return_getHeight.h>
#include <IFrameGrabberImageOf_return_getImage.h>
#include <IFrameGrabberImageOf_return_getImageCrop.h>
#include <IFrameGrabberImageOf_return_getWidth.h>
#include <IRGBVisualParamsMsgs_return_getRgbFOV.h>
#include <IRGBVisualParamsMsgs_return_getRgbHeight.h>
#include <IRGBVisualParamsMsgs_return_getRgbIntrinsicParam.h>
#include <IRGBVisualParamsMsgs_return_getRgbMirroring.h>
#include <IRGBVisualParamsMsgs_return_getRgbResolution.h>
#include <IRGBVisualParamsMsgs_return_getRgbSupportedCfg.h>
#include <IRGBVisualParamsMsgs_return_getRgbWidth.h>
#include <yarp/dev/IFrameGrabberControls.h>
#include <yarp/dev/IFrameGrabberImage.h>
#include <yarp/dev/ReturnValue.h>

class FrameGrabberMsgs :
        public yarp::os::Wire
{
public:
    //ProtocolVersion
    virtual yarp::os::ApplicationNetworkProtocolVersion getLocalProtocolVersion();
    virtual yarp::os::ApplicationNetworkProtocolVersion getRemoteProtocolVersion();
    virtual bool checkProtocolVersion();

    // Constructor
    FrameGrabberMsgs();

    //Service methods
    virtual IFrameGrabberImageOf_return_getHeight getHeightRPC();

    virtual IFrameGrabberImageOf_return_getWidth getWidthRPC();

    virtual IFrameGrabberImageOf_return_getImage getImageRPC();

    virtual IFrameGrabberImageOf_return_getImageCrop getImageCropRPC(const yarp::dev::cropType_id_t type, const std::vector<yarp::dev::vertex_t>& vertices);

    virtual IRGBVisualParamsMsgs_return_getRgbWidth getRgbWidthRPC();

    virtual IRGBVisualParamsMsgs_return_getRgbHeight getRgbHeightRPC();

    virtual IRGBVisualParamsMsgs_return_getRgbSupportedCfg getRgbSupportedConfigurationsRPC();

    virtual IRGBVisualParamsMsgs_return_getRgbResolution getRgbResolutionRPC();

    virtual yarp::dev::ReturnValue setRgbResolutionRPC(const std::int32_t width, const std::int32_t height);

    virtual IRGBVisualParamsMsgs_return_getRgbFOV getRgbFOVRPC();

    virtual yarp::dev::ReturnValue setRgbFOVRPC(const double horizontalFov, const double verticalFov);

    virtual IRGBVisualParamsMsgs_return_getRgbIntrinsicParam getRgbIntrinsicParamRPC();

    virtual IRGBVisualParamsMsgs_return_getRgbMirroring getRgbMirroringRPC();

    virtual yarp::dev::ReturnValue setRgbMirroringRPC(const bool mirror);

    virtual IFrameGrabberControlMsgs_return_getCameraDescription getCameraDescriptionRPC();

    virtual IFrameGrabberControlMsgs_return_hasFeature hasFeatureRPC(const std::int32_t feature);

    virtual yarp::dev::ReturnValue setFeature1RPC(const std::int32_t feature, const double value);

    virtual IFrameGrabberControlMsgs_return_getFeature1 getFeature1RPC(const std::int32_t feature);

    virtual yarp::dev::ReturnValue setFeature2RPC(const std::int32_t feature, const double value1, const double value2);

    virtual IFrameGrabberControlMsgs_return_getFeature2 getFeature2RPC(const std::int32_t feature);

    virtual IFrameGrabberControlMsgs_return_hasOnOff hasOnOffRPC(const std::int32_t feature);

    virtual yarp::dev::ReturnValue setActiveRPC(const std::int32_t feature, const bool onoff);

    virtual IFrameGrabberControlMsgs_return_getActive getActiveRPC(const std::int32_t feature);

    virtual IFrameGrabberControlMsgs_return_hasAuto hasAutoRPC(const std::int32_t feature);

    virtual IFrameGrabberControlMsgs_return_hasManual hasManualRPC(const std::int32_t feature);

    virtual IFrameGrabberControlMsgs_return_hasOnePush hasOnePushRPC(const std::int32_t feature);

    virtual yarp::dev::ReturnValue setModeRPC(const std::int32_t feature, const yarp::dev::FeatureMode mode);

    virtual IFrameGrabberControlMsgs_return_getMode getModeRPC(const std::int32_t feature);

    virtual yarp::dev::ReturnValue setOnePushRPC(const std::int32_t feature);

    virtual IFrameGrabberControlDC1394Msgs_return_getVideoModeMaskDC1394 getVideoModeMaskDC1394RPC();

    virtual IFrameGrabberControlDC1394Msgs_return_getVideoModeDC1394 getVideoModeDC1394RPC();

    virtual yarp::dev::ReturnValue setVideoModeDC1394RPC(const std::int32_t videomode);

    virtual IFrameGrabberControlDC1394Msgs_return_getFPSMaskDC1394 getFPSMaskDC1394RPC();

    virtual IFrameGrabberControlDC1394Msgs_return_getFPSDC1394 getFPSDC1394RPC();

    virtual yarp::dev::ReturnValue setFPSDC1394RPC(const std::int32_t fps);

    virtual IFrameGrabberControlDC1394Msgs_return_getISOSpeedDC1394 getISOSpeedDC1394RPC();

    virtual yarp::dev::ReturnValue setISOSpeedDC1394RPC(const std::int32_t speed);

    virtual IFrameGrabberControlDC1394Msgs_return_getColorCodingMaskDC1394 getColorCodingMaskDC1394RPC(const std::int32_t videomode);

    virtual IFrameGrabberControlDC1394Msgs_return_getColorCodingDC1394 getColorCodingDC1394RPC();

    virtual yarp::dev::ReturnValue setColorCodingDC1394RPC(const std::int32_t coding);

    virtual IFrameGrabberControlDC1394Msgs_return_getFormat7MaxWindowDC1394 getFormat7MaxWindowDC1394RPC();

    virtual IFrameGrabberControlDC1394Msgs_return_getFormat7WindowDC1394 getFormat7WindowDC1394RPC();

    virtual yarp::dev::ReturnValue setFormat7WindowDC1394RPC(const std::int32_t xdim, const std::int32_t ydim, const std::int32_t x0, const std::int32_t y0);

    virtual yarp::dev::ReturnValue setOperationModeDC1394RPC(const bool b1394b);

    virtual IFrameGrabberControlDC1394Msgs_return_getOperationModeDC1394 getOperationModeDC1394RPC();

    virtual yarp::dev::ReturnValue setTransmissionDC1394RPC(const bool bTxON);

    virtual IFrameGrabberControlDC1394Msgs_return_getTransmissionDC1394 getTransmissionDC1394RPC();

    virtual yarp::dev::ReturnValue setBroadcastDC1394RPC(const bool onoff);

    virtual yarp::dev::ReturnValue setDefaultsDC1394RPC();

    virtual yarp::dev::ReturnValue setResetDC1394RPC();

    virtual yarp::dev::ReturnValue setPowerDC1394RPC(const bool onoff);

    virtual yarp::dev::ReturnValue setCaptureDC1394RPC(const bool bON);

    virtual IFrameGrabberControlDC1394Msgs_return_getBytesPerPacketDC1394 getBytesPerPacketDC1394RPC();

    virtual yarp::dev::ReturnValue setBytesPerPacketDC1394RPC(const std::int32_t bpp);

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_FRAMEGRABBERMSGS_H
