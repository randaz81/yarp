/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yarp/conf/version.h>
#include <FrameGrabberMsgs.h>
#include <yarp/os/LogComponent.h>
#include <yarp/os/LogStream.h>

#include <yarp/os/idl/WireTypes.h>

#include <algorithm>

namespace
{
    YARP_LOG_COMPONENT(SERVICE_LOG_COMPONENT, "FrameGrabberMsgs")
}

//FrameGrabberMsgs_getRemoteProtocolVersion_helper declaration
class FrameGrabberMsgs_getRemoteProtocolVersion_helper :
public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getRemoteProtocolVersion_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    yarp::os::ApplicationNetworkProtocolVersion helper_proto;
};

bool FrameGrabberMsgs_getRemoteProtocolVersion_helper::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(1)) {
        return false;
    }
    if (!writer.writeString("getRemoteProtocolVersion")) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRemoteProtocolVersion_helper ::read(yarp::os::ConnectionReader & connection)
 {
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    if (!helper_proto.read(connection)) {
        reader.fail();
        return false;
    }
    return true;
}

//ProtocolVersion, client side
yarp::os::ApplicationNetworkProtocolVersion FrameGrabberMsgs::getRemoteProtocolVersion()
 {
    if(!yarp().canWrite()) {
        yError(" Missing server method FrameGrabberMsgs::getRemoteProtocolVersion");
    }
    FrameGrabberMsgs_getRemoteProtocolVersion_helper helper{};
    bool ok = yarp().write(helper, helper);
    if (ok) {
        return helper.helper_proto;}
    else {
        yarp::os::ApplicationNetworkProtocolVersion failureproto;
        return failureproto;}
}

//ProtocolVersion, client side
bool FrameGrabberMsgs::checkProtocolVersion()
 {
        auto locproto = this->getLocalProtocolVersion();
        auto remproto = this->getRemoteProtocolVersion();
        if (remproto.protocol_version != locproto.protocol_version)
        {
            yCError(SERVICE_LOG_COMPONENT) << "Invalid communication protocol.";
            yCError(SERVICE_LOG_COMPONENT) << "Local Protocol Version: " << locproto.toString();
            yCError(SERVICE_LOG_COMPONENT) << "Remote Protocol Version: " << remproto.toString();
            return false;
        }
        return true;
}

//ProtocolVersion, server side
yarp::os::ApplicationNetworkProtocolVersion FrameGrabberMsgs::getLocalProtocolVersion()
{
    yarp::os::ApplicationNetworkProtocolVersion myproto;
    //myproto.protocol_version using default value = 0
    //to change this value add the following line to the .thrift file:
    //const i16 protocol_version = <your_number_here>
    myproto.protocol_version = 0;
    myproto.yarp_major = YARP_VERSION_MAJOR;
    myproto.yarp_minor = YARP_VERSION_MINOR;
    myproto.yarp_patch = YARP_VERSION_PATCH;
    return myproto;
}

// getHeightRPC helper class declaration
class FrameGrabberMsgs_getHeightRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getHeightRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberImageOf_return_getHeight return_helper{};
    };

    using funcptr_t = IFrameGrabberImageOf_return_getHeight (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getHeightRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberImageOf_return_getHeight FrameGrabberMsgs::getHeightRPC()"};
    static constexpr const char* s_help{""};
};

// getWidthRPC helper class declaration
class FrameGrabberMsgs_getWidthRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getWidthRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberImageOf_return_getWidth return_helper{};
    };

    using funcptr_t = IFrameGrabberImageOf_return_getWidth (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getWidthRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberImageOf_return_getWidth FrameGrabberMsgs::getWidthRPC()"};
    static constexpr const char* s_help{""};
};

// getImageRPC helper class declaration
class FrameGrabberMsgs_getImageRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getImageRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberImageOf_return_getImage return_helper{};
    };

    using funcptr_t = IFrameGrabberImageOf_return_getImage (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getImageRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberImageOf_return_getImage FrameGrabberMsgs::getImageRPC()"};
    static constexpr const char* s_help{""};
};

// getImageCropRPC helper class declaration
class FrameGrabberMsgs_getImageCropRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getImageCropRPC_helper() = default;
    FrameGrabberMsgs_getImageCropRPC_helper(const yarp::dev::cropType_id_t type, const std::vector<yarp::dev::vertex_t>& vertices);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const yarp::dev::cropType_id_t type, const std::vector<yarp::dev::vertex_t>& vertices);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        yarp::dev::cropType_id_t type{};
        std::vector<yarp::dev::vertex_t> vertices{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberImageOf_return_getImageCrop return_helper{};
    };

    using funcptr_t = IFrameGrabberImageOf_return_getImageCrop (*)(const yarp::dev::cropType_id_t, const std::vector<yarp::dev::vertex_t>&);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getImageCropRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberImageOf_return_getImageCrop FrameGrabberMsgs::getImageCropRPC(const yarp::dev::cropType_id_t type, const std::vector<yarp::dev::vertex_t>& vertices)"};
    static constexpr const char* s_help{""};
};

// getRgbWidthRPC helper class declaration
class FrameGrabberMsgs_getRgbWidthRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getRgbWidthRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IRGBVisualParamsMsgs_return_getRgbWidth return_helper{};
    };

    using funcptr_t = IRGBVisualParamsMsgs_return_getRgbWidth (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getRgbWidthRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IRGBVisualParamsMsgs_return_getRgbWidth FrameGrabberMsgs::getRgbWidthRPC()"};
    static constexpr const char* s_help{""};
};

// getRgbHeightRPC helper class declaration
class FrameGrabberMsgs_getRgbHeightRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getRgbHeightRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IRGBVisualParamsMsgs_return_getRgbHeight return_helper{};
    };

    using funcptr_t = IRGBVisualParamsMsgs_return_getRgbHeight (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getRgbHeightRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IRGBVisualParamsMsgs_return_getRgbHeight FrameGrabberMsgs::getRgbHeightRPC()"};
    static constexpr const char* s_help{""};
};

// getRgbSupportedConfigurationsRPC helper class declaration
class FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IRGBVisualParamsMsgs_return_getRgbSupportedCfg return_helper{};
    };

    using funcptr_t = IRGBVisualParamsMsgs_return_getRgbSupportedCfg (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getRgbSupportedConfigurationsRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IRGBVisualParamsMsgs_return_getRgbSupportedCfg FrameGrabberMsgs::getRgbSupportedConfigurationsRPC()"};
    static constexpr const char* s_help{""};
};

// getRgbResolutionRPC helper class declaration
class FrameGrabberMsgs_getRgbResolutionRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getRgbResolutionRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IRGBVisualParamsMsgs_return_getRgbResolution return_helper{};
    };

    using funcptr_t = IRGBVisualParamsMsgs_return_getRgbResolution (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getRgbResolutionRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{3};
    static constexpr const char* s_prototype{"IRGBVisualParamsMsgs_return_getRgbResolution FrameGrabberMsgs::getRgbResolutionRPC()"};
    static constexpr const char* s_help{""};
};

// setRgbResolutionRPC helper class declaration
class FrameGrabberMsgs_setRgbResolutionRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setRgbResolutionRPC_helper() = default;
    FrameGrabberMsgs_setRgbResolutionRPC_helper(const std::int32_t width, const std::int32_t height);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const std::int32_t width, const std::int32_t height);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t width{0};
        std::int32_t height{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t, const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setRgbResolutionRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setRgbResolutionRPC(const std::int32_t width, const std::int32_t height)"};
    static constexpr const char* s_help{""};
};

// getRgbFOVRPC helper class declaration
class FrameGrabberMsgs_getRgbFOVRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getRgbFOVRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IRGBVisualParamsMsgs_return_getRgbFOV return_helper{};
    };

    using funcptr_t = IRGBVisualParamsMsgs_return_getRgbFOV (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getRgbFOVRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{3};
    static constexpr const char* s_prototype{"IRGBVisualParamsMsgs_return_getRgbFOV FrameGrabberMsgs::getRgbFOVRPC()"};
    static constexpr const char* s_help{""};
};

// setRgbFOVRPC helper class declaration
class FrameGrabberMsgs_setRgbFOVRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setRgbFOVRPC_helper() = default;
    FrameGrabberMsgs_setRgbFOVRPC_helper(const double horizontalFov, const double verticalFov);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const double horizontalFov, const double verticalFov);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        double horizontalFov{0.0};
        double verticalFov{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const double, const double);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setRgbFOVRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setRgbFOVRPC(const double horizontalFov, const double verticalFov)"};
    static constexpr const char* s_help{""};
};

// getRgbIntrinsicParamRPC helper class declaration
class FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IRGBVisualParamsMsgs_return_getRgbIntrinsicParam return_helper{};
    };

    using funcptr_t = IRGBVisualParamsMsgs_return_getRgbIntrinsicParam (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getRgbIntrinsicParamRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IRGBVisualParamsMsgs_return_getRgbIntrinsicParam FrameGrabberMsgs::getRgbIntrinsicParamRPC()"};
    static constexpr const char* s_help{""};
};

// getRgbMirroringRPC helper class declaration
class FrameGrabberMsgs_getRgbMirroringRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getRgbMirroringRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IRGBVisualParamsMsgs_return_getRgbMirroring return_helper{};
    };

    using funcptr_t = IRGBVisualParamsMsgs_return_getRgbMirroring (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getRgbMirroringRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IRGBVisualParamsMsgs_return_getRgbMirroring FrameGrabberMsgs::getRgbMirroringRPC()"};
    static constexpr const char* s_help{""};
};

// setRgbMirroringRPC helper class declaration
class FrameGrabberMsgs_setRgbMirroringRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setRgbMirroringRPC_helper() = default;
    explicit FrameGrabberMsgs_setRgbMirroringRPC_helper(const bool mirror);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const bool mirror);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        bool mirror{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const bool);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setRgbMirroringRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setRgbMirroringRPC(const bool mirror)"};
    static constexpr const char* s_help{""};
};

// getCameraDescriptionRPC helper class declaration
class FrameGrabberMsgs_getCameraDescriptionRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getCameraDescriptionRPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlMsgs_return_getCameraDescription return_helper{};
    };

    using funcptr_t = IFrameGrabberControlMsgs_return_getCameraDescription (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getCameraDescriptionRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{3};
    static constexpr const char* s_prototype{"IFrameGrabberControlMsgs_return_getCameraDescription FrameGrabberMsgs::getCameraDescriptionRPC()"};
    static constexpr const char* s_help{""};
};

// hasFeatureRPC helper class declaration
class FrameGrabberMsgs_hasFeatureRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_hasFeatureRPC_helper() = default;
    explicit FrameGrabberMsgs_hasFeatureRPC_helper(const std::int32_t feature);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t feature);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlMsgs_return_hasFeature return_helper{};
    };

    using funcptr_t = IFrameGrabberControlMsgs_return_hasFeature (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"hasFeatureRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlMsgs_return_hasFeature FrameGrabberMsgs::hasFeatureRPC(const std::int32_t feature)"};
    static constexpr const char* s_help{""};
};

// setFeature1RPC helper class declaration
class FrameGrabberMsgs_setFeature1RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setFeature1RPC_helper() = default;
    FrameGrabberMsgs_setFeature1RPC_helper(const std::int32_t feature, const double value);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const std::int32_t feature, const double value);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
        double value{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t, const double);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setFeature1RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setFeature1RPC(const std::int32_t feature, const double value)"};
    static constexpr const char* s_help{""};
};

// getFeature1RPC helper class declaration
class FrameGrabberMsgs_getFeature1RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getFeature1RPC_helper() = default;
    explicit FrameGrabberMsgs_getFeature1RPC_helper(const std::int32_t feature);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t feature);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlMsgs_return_getFeature1 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlMsgs_return_getFeature1 (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getFeature1RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlMsgs_return_getFeature1 FrameGrabberMsgs::getFeature1RPC(const std::int32_t feature)"};
    static constexpr const char* s_help{""};
};

// setFeature2RPC helper class declaration
class FrameGrabberMsgs_setFeature2RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setFeature2RPC_helper() = default;
    FrameGrabberMsgs_setFeature2RPC_helper(const std::int32_t feature, const double value1, const double value2);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const std::int32_t feature, const double value1, const double value2);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
        double value1{0.0};
        double value2{0.0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t, const double, const double);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setFeature2RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{4};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setFeature2RPC(const std::int32_t feature, const double value1, const double value2)"};
    static constexpr const char* s_help{""};
};

// getFeature2RPC helper class declaration
class FrameGrabberMsgs_getFeature2RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getFeature2RPC_helper() = default;
    explicit FrameGrabberMsgs_getFeature2RPC_helper(const std::int32_t feature);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t feature);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlMsgs_return_getFeature2 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlMsgs_return_getFeature2 (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getFeature2RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{3};
    static constexpr const char* s_prototype{"IFrameGrabberControlMsgs_return_getFeature2 FrameGrabberMsgs::getFeature2RPC(const std::int32_t feature)"};
    static constexpr const char* s_help{""};
};

// hasOnOffRPC helper class declaration
class FrameGrabberMsgs_hasOnOffRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_hasOnOffRPC_helper() = default;
    explicit FrameGrabberMsgs_hasOnOffRPC_helper(const std::int32_t feature);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t feature);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlMsgs_return_hasOnOff return_helper{};
    };

    using funcptr_t = IFrameGrabberControlMsgs_return_hasOnOff (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"hasOnOffRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlMsgs_return_hasOnOff FrameGrabberMsgs::hasOnOffRPC(const std::int32_t feature)"};
    static constexpr const char* s_help{""};
};

// setActiveRPC helper class declaration
class FrameGrabberMsgs_setActiveRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setActiveRPC_helper() = default;
    FrameGrabberMsgs_setActiveRPC_helper(const std::int32_t feature, const bool onoff);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const std::int32_t feature, const bool onoff);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
        bool onoff{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t, const bool);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setActiveRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setActiveRPC(const std::int32_t feature, const bool onoff)"};
    static constexpr const char* s_help{""};
};

// getActiveRPC helper class declaration
class FrameGrabberMsgs_getActiveRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getActiveRPC_helper() = default;
    explicit FrameGrabberMsgs_getActiveRPC_helper(const std::int32_t feature);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t feature);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlMsgs_return_getActive return_helper{};
    };

    using funcptr_t = IFrameGrabberControlMsgs_return_getActive (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getActiveRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlMsgs_return_getActive FrameGrabberMsgs::getActiveRPC(const std::int32_t feature)"};
    static constexpr const char* s_help{""};
};

// hasAutoRPC helper class declaration
class FrameGrabberMsgs_hasAutoRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_hasAutoRPC_helper() = default;
    explicit FrameGrabberMsgs_hasAutoRPC_helper(const std::int32_t feature);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t feature);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlMsgs_return_hasAuto return_helper{};
    };

    using funcptr_t = IFrameGrabberControlMsgs_return_hasAuto (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"hasAutoRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlMsgs_return_hasAuto FrameGrabberMsgs::hasAutoRPC(const std::int32_t feature)"};
    static constexpr const char* s_help{""};
};

// hasManualRPC helper class declaration
class FrameGrabberMsgs_hasManualRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_hasManualRPC_helper() = default;
    explicit FrameGrabberMsgs_hasManualRPC_helper(const std::int32_t feature);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t feature);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlMsgs_return_hasManual return_helper{};
    };

    using funcptr_t = IFrameGrabberControlMsgs_return_hasManual (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"hasManualRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlMsgs_return_hasManual FrameGrabberMsgs::hasManualRPC(const std::int32_t feature)"};
    static constexpr const char* s_help{""};
};

// hasOnePushRPC helper class declaration
class FrameGrabberMsgs_hasOnePushRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_hasOnePushRPC_helper() = default;
    explicit FrameGrabberMsgs_hasOnePushRPC_helper(const std::int32_t feature);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t feature);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlMsgs_return_hasOnePush return_helper{};
    };

    using funcptr_t = IFrameGrabberControlMsgs_return_hasOnePush (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"hasOnePushRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlMsgs_return_hasOnePush FrameGrabberMsgs::hasOnePushRPC(const std::int32_t feature)"};
    static constexpr const char* s_help{""};
};

// setModeRPC helper class declaration
class FrameGrabberMsgs_setModeRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setModeRPC_helper() = default;
    FrameGrabberMsgs_setModeRPC_helper(const std::int32_t feature, const yarp::dev::FeatureMode mode);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const std::int32_t feature, const yarp::dev::FeatureMode mode);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
        yarp::dev::FeatureMode mode{};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t, const yarp::dev::FeatureMode);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setModeRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{3};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setModeRPC(const std::int32_t feature, const yarp::dev::FeatureMode mode)"};
    static constexpr const char* s_help{""};
};

// getModeRPC helper class declaration
class FrameGrabberMsgs_getModeRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getModeRPC_helper() = default;
    explicit FrameGrabberMsgs_getModeRPC_helper(const std::int32_t feature);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t feature);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlMsgs_return_getMode return_helper{};
    };

    using funcptr_t = IFrameGrabberControlMsgs_return_getMode (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getModeRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlMsgs_return_getMode FrameGrabberMsgs::getModeRPC(const std::int32_t feature)"};
    static constexpr const char* s_help{""};
};

// setOnePushRPC helper class declaration
class FrameGrabberMsgs_setOnePushRPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setOnePushRPC_helper() = default;
    explicit FrameGrabberMsgs_setOnePushRPC_helper(const std::int32_t feature);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t feature);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t feature{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setOnePushRPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setOnePushRPC(const std::int32_t feature)"};
    static constexpr const char* s_help{""};
};

// getVideoModeMaskDC1394RPC helper class declaration
class FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getVideoModeMaskDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getVideoModeMaskDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getVideoModeMaskDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getVideoModeMaskDC1394 FrameGrabberMsgs::getVideoModeMaskDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// getVideoModeDC1394RPC helper class declaration
class FrameGrabberMsgs_getVideoModeDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getVideoModeDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getVideoModeDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getVideoModeDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getVideoModeDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getVideoModeDC1394 FrameGrabberMsgs::getVideoModeDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// setVideoModeDC1394RPC helper class declaration
class FrameGrabberMsgs_setVideoModeDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setVideoModeDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_setVideoModeDC1394RPC_helper(const std::int32_t videomode);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t videomode);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t videomode{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setVideoModeDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setVideoModeDC1394RPC(const std::int32_t videomode)"};
    static constexpr const char* s_help{""};
};

// getFPSMaskDC1394RPC helper class declaration
class FrameGrabberMsgs_getFPSMaskDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getFPSMaskDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getFPSMaskDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getFPSMaskDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getFPSMaskDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getFPSMaskDC1394 FrameGrabberMsgs::getFPSMaskDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// getFPSDC1394RPC helper class declaration
class FrameGrabberMsgs_getFPSDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getFPSDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getFPSDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getFPSDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getFPSDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getFPSDC1394 FrameGrabberMsgs::getFPSDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// setFPSDC1394RPC helper class declaration
class FrameGrabberMsgs_setFPSDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setFPSDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_setFPSDC1394RPC_helper(const std::int32_t fps);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t fps);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t fps{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setFPSDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setFPSDC1394RPC(const std::int32_t fps)"};
    static constexpr const char* s_help{""};
};

// getISOSpeedDC1394RPC helper class declaration
class FrameGrabberMsgs_getISOSpeedDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getISOSpeedDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getISOSpeedDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getISOSpeedDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getISOSpeedDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getISOSpeedDC1394 FrameGrabberMsgs::getISOSpeedDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// setISOSpeedDC1394RPC helper class declaration
class FrameGrabberMsgs_setISOSpeedDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setISOSpeedDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_setISOSpeedDC1394RPC_helper(const std::int32_t speed);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t speed);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t speed{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setISOSpeedDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setISOSpeedDC1394RPC(const std::int32_t speed)"};
    static constexpr const char* s_help{""};
};

// getColorCodingMaskDC1394RPC helper class declaration
class FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper(const std::int32_t videomode);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t videomode);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t videomode{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getColorCodingMaskDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getColorCodingMaskDC1394 (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getColorCodingMaskDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getColorCodingMaskDC1394 FrameGrabberMsgs::getColorCodingMaskDC1394RPC(const std::int32_t videomode)"};
    static constexpr const char* s_help{""};
};

// getColorCodingDC1394RPC helper class declaration
class FrameGrabberMsgs_getColorCodingDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getColorCodingDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getColorCodingDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getColorCodingDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getColorCodingDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getColorCodingDC1394 FrameGrabberMsgs::getColorCodingDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// setColorCodingDC1394RPC helper class declaration
class FrameGrabberMsgs_setColorCodingDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setColorCodingDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_setColorCodingDC1394RPC_helper(const std::int32_t coding);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t coding);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t coding{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setColorCodingDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setColorCodingDC1394RPC(const std::int32_t coding)"};
    static constexpr const char* s_help{""};
};

// getFormat7MaxWindowDC1394RPC helper class declaration
class FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getFormat7MaxWindowDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getFormat7MaxWindowDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getFormat7MaxWindowDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{7};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getFormat7MaxWindowDC1394 FrameGrabberMsgs::getFormat7MaxWindowDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// getFormat7WindowDC1394RPC helper class declaration
class FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getFormat7WindowDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getFormat7WindowDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getFormat7WindowDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{5};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getFormat7WindowDC1394 FrameGrabberMsgs::getFormat7WindowDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// setFormat7WindowDC1394RPC helper class declaration
class FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper() = default;
    FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper(const std::int32_t xdim, const std::int32_t ydim, const std::int32_t x0, const std::int32_t y0);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        Command(const std::int32_t xdim, const std::int32_t ydim, const std::int32_t x0, const std::int32_t y0);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t xdim{0};
        std::int32_t ydim{0};
        std::int32_t x0{0};
        std::int32_t y0{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t, const std::int32_t, const std::int32_t, const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setFormat7WindowDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{5};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setFormat7WindowDC1394RPC(const std::int32_t xdim, const std::int32_t ydim, const std::int32_t x0, const std::int32_t y0)"};
    static constexpr const char* s_help{""};
};

// setOperationModeDC1394RPC helper class declaration
class FrameGrabberMsgs_setOperationModeDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setOperationModeDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_setOperationModeDC1394RPC_helper(const bool b1394b);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const bool b1394b);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        bool b1394b{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const bool);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setOperationModeDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setOperationModeDC1394RPC(const bool b1394b)"};
    static constexpr const char* s_help{""};
};

// getOperationModeDC1394RPC helper class declaration
class FrameGrabberMsgs_getOperationModeDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getOperationModeDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getOperationModeDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getOperationModeDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getOperationModeDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getOperationModeDC1394 FrameGrabberMsgs::getOperationModeDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// setTransmissionDC1394RPC helper class declaration
class FrameGrabberMsgs_setTransmissionDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setTransmissionDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_setTransmissionDC1394RPC_helper(const bool bTxON);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const bool bTxON);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        bool bTxON{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const bool);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setTransmissionDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setTransmissionDC1394RPC(const bool bTxON)"};
    static constexpr const char* s_help{""};
};

// getTransmissionDC1394RPC helper class declaration
class FrameGrabberMsgs_getTransmissionDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getTransmissionDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getTransmissionDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getTransmissionDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getTransmissionDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getTransmissionDC1394 FrameGrabberMsgs::getTransmissionDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// setBroadcastDC1394RPC helper class declaration
class FrameGrabberMsgs_setBroadcastDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setBroadcastDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_setBroadcastDC1394RPC_helper(const bool onoff);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const bool onoff);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        bool onoff{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const bool);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setBroadcastDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setBroadcastDC1394RPC(const bool onoff)"};
    static constexpr const char* s_help{""};
};

// setDefaultsDC1394RPC helper class declaration
class FrameGrabberMsgs_setDefaultsDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setDefaultsDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setDefaultsDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setDefaultsDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// setResetDC1394RPC helper class declaration
class FrameGrabberMsgs_setResetDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setResetDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setResetDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setResetDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// setPowerDC1394RPC helper class declaration
class FrameGrabberMsgs_setPowerDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setPowerDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_setPowerDC1394RPC_helper(const bool onoff);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const bool onoff);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        bool onoff{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const bool);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setPowerDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setPowerDC1394RPC(const bool onoff)"};
    static constexpr const char* s_help{""};
};

// setCaptureDC1394RPC helper class declaration
class FrameGrabberMsgs_setCaptureDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setCaptureDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_setCaptureDC1394RPC_helper(const bool bON);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const bool bON);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        bool bON{false};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const bool);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setCaptureDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setCaptureDC1394RPC(const bool bON)"};
    static constexpr const char* s_help{""};
};

// getBytesPerPacketDC1394RPC helper class declaration
class FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper() = default;
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        IFrameGrabberControlDC1394Msgs_return_getBytesPerPacketDC1394 return_helper{};
    };

    using funcptr_t = IFrameGrabberControlDC1394Msgs_return_getBytesPerPacketDC1394 (*)();
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"getBytesPerPacketDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{1};
    static constexpr size_t s_reply_len{2};
    static constexpr const char* s_prototype{"IFrameGrabberControlDC1394Msgs_return_getBytesPerPacketDC1394 FrameGrabberMsgs::getBytesPerPacketDC1394RPC()"};
    static constexpr const char* s_help{""};
};

// setBytesPerPacketDC1394RPC helper class declaration
class FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper :
        public yarp::os::Portable
{
public:
    FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper() = default;
    explicit FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper(const std::int32_t bpp);
    bool write(yarp::os::ConnectionWriter& connection) const override;
    bool read(yarp::os::ConnectionReader& connection) override;

    class Command :
            public yarp::os::idl::WirePortable
    {
    public:
        Command() = default;
        explicit Command(const std::int32_t bpp);

        ~Command() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool writeTag(const yarp::os::idl::WireWriter& writer) const;
        bool writeArgs(const yarp::os::idl::WireWriter& writer) const;

        bool read(yarp::os::idl::WireReader& reader) override;
        bool readTag(yarp::os::idl::WireReader& reader);
        bool readArgs(yarp::os::idl::WireReader& reader);

        std::int32_t bpp{0};
    };

    class Reply :
            public yarp::os::idl::WirePortable
    {
    public:
        Reply() = default;
        ~Reply() override = default;

        bool write(yarp::os::ConnectionWriter& connection) const override;
        bool read(yarp::os::ConnectionReader& connection) override;

        bool write(const yarp::os::idl::WireWriter& writer) const override;
        bool read(yarp::os::idl::WireReader& reader) override;

        yarp::dev::ReturnValue return_helper{};
    };

    using funcptr_t = yarp::dev::ReturnValue (*)(const std::int32_t);
    void call(FrameGrabberMsgs* ptr);

    Command cmd;
    Reply reply;

    static constexpr const char* s_tag{"setBytesPerPacketDC1394RPC"};
    static constexpr size_t s_tag_len{1};
    static constexpr size_t s_cmd_len{2};
    static constexpr size_t s_reply_len{1};
    static constexpr const char* s_prototype{"yarp::dev::ReturnValue FrameGrabberMsgs::setBytesPerPacketDC1394RPC(const std::int32_t bpp)"};
    static constexpr const char* s_help{""};
};

// getHeightRPC helper class implementation
bool FrameGrabberMsgs_getHeightRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getHeightRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getHeightRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getHeightRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getHeightRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getHeightRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getHeightRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getHeightRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getHeightRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getHeightRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getHeightRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getHeightRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getHeightRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getHeightRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getHeightRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getHeightRPC();
}

// getWidthRPC helper class implementation
bool FrameGrabberMsgs_getWidthRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getWidthRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getWidthRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getWidthRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getWidthRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getWidthRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getWidthRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getWidthRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getWidthRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getWidthRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getWidthRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getWidthRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getWidthRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getWidthRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getWidthRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getWidthRPC();
}

// getImageRPC helper class implementation
bool FrameGrabberMsgs_getImageRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getImageRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getImageRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getImageRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getImageRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getImageRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getImageRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getImageRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getImageRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getImageRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getImageRPC();
}

// getImageCropRPC helper class implementation
FrameGrabberMsgs_getImageCropRPC_helper::FrameGrabberMsgs_getImageCropRPC_helper(const yarp::dev::cropType_id_t type, const std::vector<yarp::dev::vertex_t>& vertices) :
        cmd{type, vertices}
{
}

bool FrameGrabberMsgs_getImageCropRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getImageCropRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_getImageCropRPC_helper::Command::Command(const yarp::dev::cropType_id_t type, const std::vector<yarp::dev::vertex_t>& vertices) :
        type{type},
        vertices{vertices}
{
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(static_cast<int32_t>(type))) {
        return false;
    }
    if (!writer.writeListBegin(BOTTLE_TAG_LIST, vertices.size())) {
        return false;
    }
    for (const auto& _item : vertices) {
        if (!writer.writeNested(_item)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    int32_t _ecast;
    if (!reader.readI32(_ecast)) {
        reader.fail();
        return false;
    }
    type = static_cast<yarp::dev::cropType_id_t>(_ecast);
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_LIST) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    vertices.resize(_csize);
    for (size_t _i = 0; _i < _csize; ++_i) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readNested(vertices[_i])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getImageCropRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getImageCropRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getImageCropRPC(cmd.type, cmd.vertices);
}

// getRgbWidthRPC helper class implementation
bool FrameGrabberMsgs_getRgbWidthRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getRgbWidthRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getRgbWidthRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getRgbWidthRPC();
}

// getRgbHeightRPC helper class implementation
bool FrameGrabberMsgs_getRgbHeightRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getRgbHeightRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getRgbHeightRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getRgbHeightRPC();
}

// getRgbSupportedConfigurationsRPC helper class implementation
bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getRgbSupportedConfigurationsRPC();
}

// getRgbResolutionRPC helper class implementation
bool FrameGrabberMsgs_getRgbResolutionRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getRgbResolutionRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getRgbResolutionRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getRgbResolutionRPC();
}

// setRgbResolutionRPC helper class implementation
FrameGrabberMsgs_setRgbResolutionRPC_helper::FrameGrabberMsgs_setRgbResolutionRPC_helper(const std::int32_t width, const std::int32_t height) :
        cmd{width, height}
{
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setRgbResolutionRPC_helper::Command::Command(const std::int32_t width, const std::int32_t height) :
        width{width},
        height{height}
{
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(width)) {
        return false;
    }
    if (!writer.writeI32(height)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(width)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(height)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setRgbResolutionRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setRgbResolutionRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setRgbResolutionRPC(cmd.width, cmd.height);
}

// getRgbFOVRPC helper class implementation
bool FrameGrabberMsgs_getRgbFOVRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getRgbFOVRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getRgbFOVRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getRgbFOVRPC();
}

// setRgbFOVRPC helper class implementation
FrameGrabberMsgs_setRgbFOVRPC_helper::FrameGrabberMsgs_setRgbFOVRPC_helper(const double horizontalFov, const double verticalFov) :
        cmd{horizontalFov, verticalFov}
{
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setRgbFOVRPC_helper::Command::Command(const double horizontalFov, const double verticalFov) :
        horizontalFov{horizontalFov},
        verticalFov{verticalFov}
{
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(horizontalFov)) {
        return false;
    }
    if (!writer.writeFloat64(verticalFov)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(horizontalFov)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(verticalFov)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setRgbFOVRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setRgbFOVRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setRgbFOVRPC(cmd.horizontalFov, cmd.verticalFov);
}

// getRgbIntrinsicParamRPC helper class implementation
bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getRgbIntrinsicParamRPC();
}

// getRgbMirroringRPC helper class implementation
bool FrameGrabberMsgs_getRgbMirroringRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getRgbMirroringRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getRgbMirroringRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getRgbMirroringRPC();
}

// setRgbMirroringRPC helper class implementation
FrameGrabberMsgs_setRgbMirroringRPC_helper::FrameGrabberMsgs_setRgbMirroringRPC_helper(const bool mirror) :
        cmd{mirror}
{
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setRgbMirroringRPC_helper::Command::Command(const bool mirror) :
        mirror{mirror}
{
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(mirror)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(mirror)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setRgbMirroringRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setRgbMirroringRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setRgbMirroringRPC(cmd.mirror);
}

// getCameraDescriptionRPC helper class implementation
bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getCameraDescriptionRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getCameraDescriptionRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getCameraDescriptionRPC();
}

// hasFeatureRPC helper class implementation
FrameGrabberMsgs_hasFeatureRPC_helper::FrameGrabberMsgs_hasFeatureRPC_helper(const std::int32_t feature) :
        cmd{feature}
{
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_hasFeatureRPC_helper::Command::Command(const std::int32_t feature) :
        feature{feature}
{
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_hasFeatureRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_hasFeatureRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->hasFeatureRPC(cmd.feature);
}

// setFeature1RPC helper class implementation
FrameGrabberMsgs_setFeature1RPC_helper::FrameGrabberMsgs_setFeature1RPC_helper(const std::int32_t feature, const double value) :
        cmd{feature, value}
{
}

bool FrameGrabberMsgs_setFeature1RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setFeature1RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setFeature1RPC_helper::Command::Command(const std::int32_t feature, const double value) :
        feature{feature},
        value{value}
{
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    if (!writer.writeFloat64(value)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(value)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setFeature1RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setFeature1RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setFeature1RPC(cmd.feature, cmd.value);
}

// getFeature1RPC helper class implementation
FrameGrabberMsgs_getFeature1RPC_helper::FrameGrabberMsgs_getFeature1RPC_helper(const std::int32_t feature) :
        cmd{feature}
{
}

bool FrameGrabberMsgs_getFeature1RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getFeature1RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_getFeature1RPC_helper::Command::Command(const std::int32_t feature) :
        feature{feature}
{
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getFeature1RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getFeature1RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getFeature1RPC(cmd.feature);
}

// setFeature2RPC helper class implementation
FrameGrabberMsgs_setFeature2RPC_helper::FrameGrabberMsgs_setFeature2RPC_helper(const std::int32_t feature, const double value1, const double value2) :
        cmd{feature, value1, value2}
{
}

bool FrameGrabberMsgs_setFeature2RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setFeature2RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setFeature2RPC_helper::Command::Command(const std::int32_t feature, const double value1, const double value2) :
        feature{feature},
        value1{value1},
        value2{value2}
{
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    if (!writer.writeFloat64(value1)) {
        return false;
    }
    if (!writer.writeFloat64(value2)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(value1)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(value2)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setFeature2RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setFeature2RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setFeature2RPC(cmd.feature, cmd.value1, cmd.value2);
}

// getFeature2RPC helper class implementation
FrameGrabberMsgs_getFeature2RPC_helper::FrameGrabberMsgs_getFeature2RPC_helper(const std::int32_t feature) :
        cmd{feature}
{
}

bool FrameGrabberMsgs_getFeature2RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getFeature2RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_getFeature2RPC_helper::Command::Command(const std::int32_t feature) :
        feature{feature}
{
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getFeature2RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getFeature2RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getFeature2RPC(cmd.feature);
}

// hasOnOffRPC helper class implementation
FrameGrabberMsgs_hasOnOffRPC_helper::FrameGrabberMsgs_hasOnOffRPC_helper(const std::int32_t feature) :
        cmd{feature}
{
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_hasOnOffRPC_helper::Command::Command(const std::int32_t feature) :
        feature{feature}
{
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_hasOnOffRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_hasOnOffRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->hasOnOffRPC(cmd.feature);
}

// setActiveRPC helper class implementation
FrameGrabberMsgs_setActiveRPC_helper::FrameGrabberMsgs_setActiveRPC_helper(const std::int32_t feature, const bool onoff) :
        cmd{feature, onoff}
{
}

bool FrameGrabberMsgs_setActiveRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setActiveRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setActiveRPC_helper::Command::Command(const std::int32_t feature, const bool onoff) :
        feature{feature},
        onoff{onoff}
{
}

bool FrameGrabberMsgs_setActiveRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setActiveRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setActiveRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setActiveRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setActiveRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    if (!writer.writeBool(onoff)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setActiveRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setActiveRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setActiveRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(onoff)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setActiveRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setActiveRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setActiveRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setActiveRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setActiveRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setActiveRPC(cmd.feature, cmd.onoff);
}

// getActiveRPC helper class implementation
FrameGrabberMsgs_getActiveRPC_helper::FrameGrabberMsgs_getActiveRPC_helper(const std::int32_t feature) :
        cmd{feature}
{
}

bool FrameGrabberMsgs_getActiveRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getActiveRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_getActiveRPC_helper::Command::Command(const std::int32_t feature) :
        feature{feature}
{
}

bool FrameGrabberMsgs_getActiveRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getActiveRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getActiveRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getActiveRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getActiveRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getActiveRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getActiveRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getActiveRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getActiveRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getActiveRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getActiveRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getActiveRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getActiveRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getActiveRPC(cmd.feature);
}

// hasAutoRPC helper class implementation
FrameGrabberMsgs_hasAutoRPC_helper::FrameGrabberMsgs_hasAutoRPC_helper(const std::int32_t feature) :
        cmd{feature}
{
}

bool FrameGrabberMsgs_hasAutoRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_hasAutoRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_hasAutoRPC_helper::Command::Command(const std::int32_t feature) :
        feature{feature}
{
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_hasAutoRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_hasAutoRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->hasAutoRPC(cmd.feature);
}

// hasManualRPC helper class implementation
FrameGrabberMsgs_hasManualRPC_helper::FrameGrabberMsgs_hasManualRPC_helper(const std::int32_t feature) :
        cmd{feature}
{
}

bool FrameGrabberMsgs_hasManualRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_hasManualRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_hasManualRPC_helper::Command::Command(const std::int32_t feature) :
        feature{feature}
{
}

bool FrameGrabberMsgs_hasManualRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_hasManualRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_hasManualRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasManualRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasManualRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasManualRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasManualRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasManualRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasManualRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_hasManualRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_hasManualRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_hasManualRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_hasManualRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->hasManualRPC(cmd.feature);
}

// hasOnePushRPC helper class implementation
FrameGrabberMsgs_hasOnePushRPC_helper::FrameGrabberMsgs_hasOnePushRPC_helper(const std::int32_t feature) :
        cmd{feature}
{
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_hasOnePushRPC_helper::Command::Command(const std::int32_t feature) :
        feature{feature}
{
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_hasOnePushRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_hasOnePushRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->hasOnePushRPC(cmd.feature);
}

// setModeRPC helper class implementation
FrameGrabberMsgs_setModeRPC_helper::FrameGrabberMsgs_setModeRPC_helper(const std::int32_t feature, const yarp::dev::FeatureMode mode) :
        cmd{feature, mode}
{
}

bool FrameGrabberMsgs_setModeRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setModeRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setModeRPC_helper::Command::Command(const std::int32_t feature, const yarp::dev::FeatureMode mode) :
        feature{feature},
        mode{mode}
{
}

bool FrameGrabberMsgs_setModeRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setModeRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setModeRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setModeRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setModeRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    if (!writer.writeI32(static_cast<int32_t>(mode))) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setModeRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setModeRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setModeRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    int32_t _ecast;
    if (!reader.readI32(_ecast)) {
        reader.fail();
        return false;
    }
    mode = static_cast<yarp::dev::FeatureMode>(_ecast);
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setModeRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setModeRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setModeRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setModeRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setModeRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setModeRPC(cmd.feature, cmd.mode);
}

// getModeRPC helper class implementation
FrameGrabberMsgs_getModeRPC_helper::FrameGrabberMsgs_getModeRPC_helper(const std::int32_t feature) :
        cmd{feature}
{
}

bool FrameGrabberMsgs_getModeRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getModeRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_getModeRPC_helper::Command::Command(const std::int32_t feature) :
        feature{feature}
{
}

bool FrameGrabberMsgs_getModeRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getModeRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getModeRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getModeRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getModeRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getModeRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getModeRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getModeRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getModeRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getModeRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getModeRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getModeRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getModeRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getModeRPC(cmd.feature);
}

// setOnePushRPC helper class implementation
FrameGrabberMsgs_setOnePushRPC_helper::FrameGrabberMsgs_setOnePushRPC_helper(const std::int32_t feature) :
        cmd{feature}
{
}

bool FrameGrabberMsgs_setOnePushRPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setOnePushRPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setOnePushRPC_helper::Command::Command(const std::int32_t feature) :
        feature{feature}
{
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(feature)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(feature)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setOnePushRPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setOnePushRPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setOnePushRPC(cmd.feature);
}

// getVideoModeMaskDC1394RPC helper class implementation
bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getVideoModeMaskDC1394RPC();
}

// getVideoModeDC1394RPC helper class implementation
bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getVideoModeDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getVideoModeDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getVideoModeDC1394RPC();
}

// setVideoModeDC1394RPC helper class implementation
FrameGrabberMsgs_setVideoModeDC1394RPC_helper::FrameGrabberMsgs_setVideoModeDC1394RPC_helper(const std::int32_t videomode) :
        cmd{videomode}
{
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Command::Command(const std::int32_t videomode) :
        videomode{videomode}
{
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(videomode)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(videomode)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setVideoModeDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setVideoModeDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setVideoModeDC1394RPC(cmd.videomode);
}

// getFPSMaskDC1394RPC helper class implementation
bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getFPSMaskDC1394RPC();
}

// getFPSDC1394RPC helper class implementation
bool FrameGrabberMsgs_getFPSDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getFPSDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getFPSDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getFPSDC1394RPC();
}

// setFPSDC1394RPC helper class implementation
FrameGrabberMsgs_setFPSDC1394RPC_helper::FrameGrabberMsgs_setFPSDC1394RPC_helper(const std::int32_t fps) :
        cmd{fps}
{
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setFPSDC1394RPC_helper::Command::Command(const std::int32_t fps) :
        fps{fps}
{
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(fps)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(fps)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setFPSDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setFPSDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setFPSDC1394RPC(cmd.fps);
}

// getISOSpeedDC1394RPC helper class implementation
bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getISOSpeedDC1394RPC();
}

// setISOSpeedDC1394RPC helper class implementation
FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::FrameGrabberMsgs_setISOSpeedDC1394RPC_helper(const std::int32_t speed) :
        cmd{speed}
{
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Command::Command(const std::int32_t speed) :
        speed{speed}
{
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(speed)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(speed)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setISOSpeedDC1394RPC(cmd.speed);
}

// getColorCodingMaskDC1394RPC helper class implementation
FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper(const std::int32_t videomode) :
        cmd{videomode}
{
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Command::Command(const std::int32_t videomode) :
        videomode{videomode}
{
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(videomode)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(videomode)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getColorCodingMaskDC1394RPC(cmd.videomode);
}

// getColorCodingDC1394RPC helper class implementation
bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getColorCodingDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getColorCodingDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getColorCodingDC1394RPC();
}

// setColorCodingDC1394RPC helper class implementation
FrameGrabberMsgs_setColorCodingDC1394RPC_helper::FrameGrabberMsgs_setColorCodingDC1394RPC_helper(const std::int32_t coding) :
        cmd{coding}
{
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Command::Command(const std::int32_t coding) :
        coding{coding}
{
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(coding)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(coding)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setColorCodingDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setColorCodingDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setColorCodingDC1394RPC(cmd.coding);
}

// getFormat7MaxWindowDC1394RPC helper class implementation
bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getFormat7MaxWindowDC1394RPC();
}

// getFormat7WindowDC1394RPC helper class implementation
bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getFormat7WindowDC1394RPC();
}

// setFormat7WindowDC1394RPC helper class implementation
FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper(const std::int32_t xdim, const std::int32_t ydim, const std::int32_t x0, const std::int32_t y0) :
        cmd{xdim, ydim, x0, y0}
{
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Command::Command(const std::int32_t xdim, const std::int32_t ydim, const std::int32_t x0, const std::int32_t y0) :
        xdim{xdim},
        ydim{ydim},
        x0{x0},
        y0{y0}
{
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(xdim)) {
        return false;
    }
    if (!writer.writeI32(ydim)) {
        return false;
    }
    if (!writer.writeI32(x0)) {
        return false;
    }
    if (!writer.writeI32(y0)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(xdim)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(ydim)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(x0)) {
        reader.fail();
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(y0)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setFormat7WindowDC1394RPC(cmd.xdim, cmd.ydim, cmd.x0, cmd.y0);
}

// setOperationModeDC1394RPC helper class implementation
FrameGrabberMsgs_setOperationModeDC1394RPC_helper::FrameGrabberMsgs_setOperationModeDC1394RPC_helper(const bool b1394b) :
        cmd{b1394b}
{
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Command::Command(const bool b1394b) :
        b1394b{b1394b}
{
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(b1394b)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(b1394b)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setOperationModeDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setOperationModeDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setOperationModeDC1394RPC(cmd.b1394b);
}

// getOperationModeDC1394RPC helper class implementation
bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getOperationModeDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getOperationModeDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getOperationModeDC1394RPC();
}

// setTransmissionDC1394RPC helper class implementation
FrameGrabberMsgs_setTransmissionDC1394RPC_helper::FrameGrabberMsgs_setTransmissionDC1394RPC_helper(const bool bTxON) :
        cmd{bTxON}
{
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Command::Command(const bool bTxON) :
        bTxON{bTxON}
{
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(bTxON)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(bTxON)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setTransmissionDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setTransmissionDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setTransmissionDC1394RPC(cmd.bTxON);
}

// getTransmissionDC1394RPC helper class implementation
bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getTransmissionDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getTransmissionDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getTransmissionDC1394RPC();
}

// setBroadcastDC1394RPC helper class implementation
FrameGrabberMsgs_setBroadcastDC1394RPC_helper::FrameGrabberMsgs_setBroadcastDC1394RPC_helper(const bool onoff) :
        cmd{onoff}
{
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Command::Command(const bool onoff) :
        onoff{onoff}
{
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(onoff)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(onoff)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setBroadcastDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setBroadcastDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setBroadcastDC1394RPC(cmd.onoff);
}

// setDefaultsDC1394RPC helper class implementation
bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setDefaultsDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setDefaultsDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setDefaultsDC1394RPC();
}

// setResetDC1394RPC helper class implementation
bool FrameGrabberMsgs_setResetDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setResetDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setResetDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setResetDC1394RPC();
}

// setPowerDC1394RPC helper class implementation
FrameGrabberMsgs_setPowerDC1394RPC_helper::FrameGrabberMsgs_setPowerDC1394RPC_helper(const bool onoff) :
        cmd{onoff}
{
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setPowerDC1394RPC_helper::Command::Command(const bool onoff) :
        onoff{onoff}
{
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(onoff)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(onoff)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setPowerDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setPowerDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setPowerDC1394RPC(cmd.onoff);
}

// setCaptureDC1394RPC helper class implementation
FrameGrabberMsgs_setCaptureDC1394RPC_helper::FrameGrabberMsgs_setCaptureDC1394RPC_helper(const bool bON) :
        cmd{bON}
{
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setCaptureDC1394RPC_helper::Command::Command(const bool bON) :
        bON{bON}
{
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeBool(bON)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readBool(bON)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setCaptureDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setCaptureDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setCaptureDC1394RPC(cmd.bON);
}

// getBytesPerPacketDC1394RPC helper class implementation
bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer [[maybe_unused]]) const
{
    return true;
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.writeListHeader(s_reply_len)) {
            return false;
        }
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (!reader.readListReturn()) {
        return false;
    }
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->getBytesPerPacketDC1394RPC();
}

// setBytesPerPacketDC1394RPC helper class implementation
FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper(const std::int32_t bpp) :
        cmd{bpp}
{
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::write(yarp::os::ConnectionWriter& connection) const
{
    return cmd.write(connection);
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::read(yarp::os::ConnectionReader& connection)
{
    return reply.read(connection);
}

FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Command::Command(const std::int32_t bpp) :
        bpp{bpp}
{
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Command::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(s_cmd_len)) {
        return false;
    }
    return write(writer);
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Command::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }
    return read(reader);
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Command::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writeTag(writer)) {
        return false;
    }
    if (!writeArgs(writer)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Command::writeTag(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeTag(s_tag, 1, s_tag_len)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Command::writeArgs(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(bpp)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Command::read(yarp::os::idl::WireReader& reader)
{
    if (!readTag(reader)) {
        return false;
    }
    if (!readArgs(reader)) {
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Command::readTag(yarp::os::idl::WireReader& reader)
{
    std::string tag = reader.readTag(s_tag_len);
    if (reader.isError()) {
        return false;
    }
    if (tag != s_tag) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Command::readArgs(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI32(bpp)) {
        reader.fail();
        return false;
    }
    if (!reader.noMore()) {
        reader.fail();
        return false;
    }
    return true;
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Reply::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    return write(writer);
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Reply::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    return read(reader);
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Reply::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.isNull()) {
        if (!writer.write(return_helper)) {
            return false;
        }
    }
    return true;
}

bool FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::Reply::read(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(return_helper)) {
        reader.fail();
        return false;
    }
    return true;
}

void FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::call(FrameGrabberMsgs* ptr)
{
    reply.return_helper = ptr->setBytesPerPacketDC1394RPC(cmd.bpp);
}

// Constructor
FrameGrabberMsgs::FrameGrabberMsgs()
{
    yarp().setOwner(*this);
}

IFrameGrabberImageOf_return_getHeight FrameGrabberMsgs::getHeightRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getHeightRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getHeightRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberImageOf_return_getHeight{};
}

IFrameGrabberImageOf_return_getWidth FrameGrabberMsgs::getWidthRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getWidthRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getWidthRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberImageOf_return_getWidth{};
}

IFrameGrabberImageOf_return_getImage FrameGrabberMsgs::getImageRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getImageRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getImageRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberImageOf_return_getImage{};
}

IFrameGrabberImageOf_return_getImageCrop FrameGrabberMsgs::getImageCropRPC(const yarp::dev::cropType_id_t type, const std::vector<yarp::dev::vertex_t>& vertices)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getImageCropRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getImageCropRPC_helper helper{type, vertices};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberImageOf_return_getImageCrop{};
}

IRGBVisualParamsMsgs_return_getRgbWidth FrameGrabberMsgs::getRgbWidthRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getRgbWidthRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getRgbWidthRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IRGBVisualParamsMsgs_return_getRgbWidth{};
}

IRGBVisualParamsMsgs_return_getRgbHeight FrameGrabberMsgs::getRgbHeightRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getRgbHeightRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getRgbHeightRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IRGBVisualParamsMsgs_return_getRgbHeight{};
}

IRGBVisualParamsMsgs_return_getRgbSupportedCfg FrameGrabberMsgs::getRgbSupportedConfigurationsRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IRGBVisualParamsMsgs_return_getRgbSupportedCfg{};
}

IRGBVisualParamsMsgs_return_getRgbResolution FrameGrabberMsgs::getRgbResolutionRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getRgbResolutionRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getRgbResolutionRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IRGBVisualParamsMsgs_return_getRgbResolution{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setRgbResolutionRPC(const std::int32_t width, const std::int32_t height)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setRgbResolutionRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setRgbResolutionRPC_helper helper{width, height};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IRGBVisualParamsMsgs_return_getRgbFOV FrameGrabberMsgs::getRgbFOVRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getRgbFOVRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getRgbFOVRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IRGBVisualParamsMsgs_return_getRgbFOV{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setRgbFOVRPC(const double horizontalFov, const double verticalFov)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setRgbFOVRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setRgbFOVRPC_helper helper{horizontalFov, verticalFov};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IRGBVisualParamsMsgs_return_getRgbIntrinsicParam FrameGrabberMsgs::getRgbIntrinsicParamRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IRGBVisualParamsMsgs_return_getRgbIntrinsicParam{};
}

IRGBVisualParamsMsgs_return_getRgbMirroring FrameGrabberMsgs::getRgbMirroringRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getRgbMirroringRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getRgbMirroringRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IRGBVisualParamsMsgs_return_getRgbMirroring{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setRgbMirroringRPC(const bool mirror)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setRgbMirroringRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setRgbMirroringRPC_helper helper{mirror};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlMsgs_return_getCameraDescription FrameGrabberMsgs::getCameraDescriptionRPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getCameraDescriptionRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getCameraDescriptionRPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlMsgs_return_getCameraDescription{};
}

IFrameGrabberControlMsgs_return_hasFeature FrameGrabberMsgs::hasFeatureRPC(const std::int32_t feature)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_hasFeatureRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_hasFeatureRPC_helper helper{feature};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlMsgs_return_hasFeature{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setFeature1RPC(const std::int32_t feature, const double value)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setFeature1RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setFeature1RPC_helper helper{feature, value};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlMsgs_return_getFeature1 FrameGrabberMsgs::getFeature1RPC(const std::int32_t feature)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getFeature1RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getFeature1RPC_helper helper{feature};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlMsgs_return_getFeature1{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setFeature2RPC(const std::int32_t feature, const double value1, const double value2)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setFeature2RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setFeature2RPC_helper helper{feature, value1, value2};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlMsgs_return_getFeature2 FrameGrabberMsgs::getFeature2RPC(const std::int32_t feature)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getFeature2RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getFeature2RPC_helper helper{feature};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlMsgs_return_getFeature2{};
}

IFrameGrabberControlMsgs_return_hasOnOff FrameGrabberMsgs::hasOnOffRPC(const std::int32_t feature)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_hasOnOffRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_hasOnOffRPC_helper helper{feature};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlMsgs_return_hasOnOff{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setActiveRPC(const std::int32_t feature, const bool onoff)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setActiveRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setActiveRPC_helper helper{feature, onoff};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlMsgs_return_getActive FrameGrabberMsgs::getActiveRPC(const std::int32_t feature)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getActiveRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getActiveRPC_helper helper{feature};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlMsgs_return_getActive{};
}

IFrameGrabberControlMsgs_return_hasAuto FrameGrabberMsgs::hasAutoRPC(const std::int32_t feature)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_hasAutoRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_hasAutoRPC_helper helper{feature};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlMsgs_return_hasAuto{};
}

IFrameGrabberControlMsgs_return_hasManual FrameGrabberMsgs::hasManualRPC(const std::int32_t feature)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_hasManualRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_hasManualRPC_helper helper{feature};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlMsgs_return_hasManual{};
}

IFrameGrabberControlMsgs_return_hasOnePush FrameGrabberMsgs::hasOnePushRPC(const std::int32_t feature)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_hasOnePushRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_hasOnePushRPC_helper helper{feature};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlMsgs_return_hasOnePush{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setModeRPC(const std::int32_t feature, const yarp::dev::FeatureMode mode)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setModeRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setModeRPC_helper helper{feature, mode};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlMsgs_return_getMode FrameGrabberMsgs::getModeRPC(const std::int32_t feature)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getModeRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getModeRPC_helper helper{feature};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlMsgs_return_getMode{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setOnePushRPC(const std::int32_t feature)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setOnePushRPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setOnePushRPC_helper helper{feature};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlDC1394Msgs_return_getVideoModeMaskDC1394 FrameGrabberMsgs::getVideoModeMaskDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getVideoModeMaskDC1394{};
}

IFrameGrabberControlDC1394Msgs_return_getVideoModeDC1394 FrameGrabberMsgs::getVideoModeDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getVideoModeDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getVideoModeDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getVideoModeDC1394{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setVideoModeDC1394RPC(const std::int32_t videomode)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setVideoModeDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setVideoModeDC1394RPC_helper helper{videomode};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlDC1394Msgs_return_getFPSMaskDC1394 FrameGrabberMsgs::getFPSMaskDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getFPSMaskDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getFPSMaskDC1394{};
}

IFrameGrabberControlDC1394Msgs_return_getFPSDC1394 FrameGrabberMsgs::getFPSDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getFPSDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getFPSDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getFPSDC1394{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setFPSDC1394RPC(const std::int32_t fps)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setFPSDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setFPSDC1394RPC_helper helper{fps};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlDC1394Msgs_return_getISOSpeedDC1394 FrameGrabberMsgs::getISOSpeedDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getISOSpeedDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getISOSpeedDC1394{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setISOSpeedDC1394RPC(const std::int32_t speed)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setISOSpeedDC1394RPC_helper helper{speed};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlDC1394Msgs_return_getColorCodingMaskDC1394 FrameGrabberMsgs::getColorCodingMaskDC1394RPC(const std::int32_t videomode)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper helper{videomode};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getColorCodingMaskDC1394{};
}

IFrameGrabberControlDC1394Msgs_return_getColorCodingDC1394 FrameGrabberMsgs::getColorCodingDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getColorCodingDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getColorCodingDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getColorCodingDC1394{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setColorCodingDC1394RPC(const std::int32_t coding)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setColorCodingDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setColorCodingDC1394RPC_helper helper{coding};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlDC1394Msgs_return_getFormat7MaxWindowDC1394 FrameGrabberMsgs::getFormat7MaxWindowDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getFormat7MaxWindowDC1394{};
}

IFrameGrabberControlDC1394Msgs_return_getFormat7WindowDC1394 FrameGrabberMsgs::getFormat7WindowDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getFormat7WindowDC1394{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setFormat7WindowDC1394RPC(const std::int32_t xdim, const std::int32_t ydim, const std::int32_t x0, const std::int32_t y0)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper helper{xdim, ydim, x0, y0};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setOperationModeDC1394RPC(const bool b1394b)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setOperationModeDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setOperationModeDC1394RPC_helper helper{b1394b};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlDC1394Msgs_return_getOperationModeDC1394 FrameGrabberMsgs::getOperationModeDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getOperationModeDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getOperationModeDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getOperationModeDC1394{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setTransmissionDC1394RPC(const bool bTxON)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setTransmissionDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setTransmissionDC1394RPC_helper helper{bTxON};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlDC1394Msgs_return_getTransmissionDC1394 FrameGrabberMsgs::getTransmissionDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getTransmissionDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getTransmissionDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getTransmissionDC1394{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setBroadcastDC1394RPC(const bool onoff)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setBroadcastDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setBroadcastDC1394RPC_helper helper{onoff};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setDefaultsDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setDefaultsDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setDefaultsDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setResetDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setResetDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setResetDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setPowerDC1394RPC(const bool onoff)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setPowerDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setPowerDC1394RPC_helper helper{onoff};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setCaptureDC1394RPC(const bool bON)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setCaptureDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setCaptureDC1394RPC_helper helper{bON};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

IFrameGrabberControlDC1394Msgs_return_getBytesPerPacketDC1394 FrameGrabberMsgs::getBytesPerPacketDC1394RPC()
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper helper{};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : IFrameGrabberControlDC1394Msgs_return_getBytesPerPacketDC1394{};
}

yarp::dev::ReturnValue FrameGrabberMsgs::setBytesPerPacketDC1394RPC(const std::int32_t bpp)
{
    if (!yarp().canWrite()) {
        yError("Missing server method '%s'?", FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::s_prototype);
    }
    FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper helper{bpp};
    bool ok = yarp().write(helper, helper);
    return ok ? helper.reply.return_helper : yarp::dev::ReturnValue{};
}

// help method
std::vector<std::string> FrameGrabberMsgs::help(const std::string& functionName)
{
    bool showAll = (functionName == "--all");
    std::vector<std::string> helpString;
    if (showAll) {
        helpString.emplace_back("*** Available commands:");
        helpString.emplace_back(FrameGrabberMsgs_getHeightRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getWidthRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getImageRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getImageCropRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getRgbWidthRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getRgbHeightRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getRgbResolutionRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setRgbResolutionRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getRgbFOVRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setRgbFOVRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getRgbMirroringRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setRgbMirroringRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getCameraDescriptionRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_hasFeatureRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setFeature1RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getFeature1RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setFeature2RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getFeature2RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_hasOnOffRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setActiveRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getActiveRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_hasAutoRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_hasManualRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_hasOnePushRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setModeRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getModeRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setOnePushRPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getVideoModeDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setVideoModeDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getFPSDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setFPSDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getColorCodingDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setColorCodingDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setOperationModeDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getOperationModeDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setTransmissionDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getTransmissionDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setBroadcastDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setDefaultsDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setResetDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setPowerDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setCaptureDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::s_tag);
        helpString.emplace_back(FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::s_tag);
        helpString.emplace_back("help");
    } else {
        if (functionName == FrameGrabberMsgs_getHeightRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getHeightRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getWidthRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getWidthRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getImageRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getImageRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getImageCropRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getImageCropRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getRgbWidthRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getRgbWidthRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getRgbHeightRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getRgbHeightRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getRgbResolutionRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getRgbResolutionRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setRgbResolutionRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setRgbResolutionRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getRgbFOVRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getRgbFOVRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setRgbFOVRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setRgbFOVRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getRgbMirroringRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getRgbMirroringRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setRgbMirroringRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setRgbMirroringRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getCameraDescriptionRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getCameraDescriptionRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_hasFeatureRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_hasFeatureRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setFeature1RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setFeature1RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getFeature1RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getFeature1RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setFeature2RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setFeature2RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getFeature2RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getFeature2RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_hasOnOffRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_hasOnOffRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setActiveRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setActiveRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getActiveRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getActiveRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_hasAutoRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_hasAutoRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_hasManualRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_hasManualRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_hasOnePushRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_hasOnePushRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setModeRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setModeRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getModeRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getModeRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setOnePushRPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setOnePushRPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getVideoModeDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getVideoModeDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setVideoModeDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setVideoModeDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getFPSDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getFPSDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setFPSDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setFPSDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getColorCodingDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getColorCodingDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setColorCodingDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setColorCodingDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setOperationModeDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setOperationModeDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getOperationModeDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getOperationModeDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setTransmissionDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setTransmissionDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getTransmissionDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getTransmissionDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setBroadcastDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setBroadcastDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setDefaultsDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setDefaultsDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setResetDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setResetDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setPowerDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setPowerDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setCaptureDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setCaptureDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::s_prototype);
        }
        if (functionName == FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::s_tag) {
            helpString.emplace_back(FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::s_prototype);
        }
        if (functionName == "help") {
            helpString.emplace_back("std::vector<std::string> help(const std::string& functionName = \"--all\")");
            helpString.emplace_back("Return list of available commands, or help message for a specific function");
            helpString.emplace_back("@param functionName name of command for which to get a detailed description. If none or '--all' is provided, print list of available commands");
            helpString.emplace_back("@return list of strings (one string per line)");
        }
    }
    if (helpString.empty()) {
        helpString.emplace_back("Command not found");
    }
    return helpString;
}

// read from ConnectionReader
bool FrameGrabberMsgs::read(yarp::os::ConnectionReader& connection)
{
    constexpr size_t max_tag_len = 1;
    size_t tag_len = 1;

    yarp::os::idl::WireReader reader(connection);
    reader.expectAccept();
    if (!reader.readListHeader()) {
        reader.fail();
        return false;
    }

    std::string tag = reader.readTag(1);
    bool direct = (tag == "__direct__");
    if (direct) {
        tag = reader.readTag(1);
    }
    while (tag_len <= max_tag_len && !reader.isError()) {
        if(tag == "getRemoteProtocolVersion") {
            if (!reader.noMore()) {
                yError("Reader invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                reader.fail();
                return false;
            }

            auto proto = getLocalProtocolVersion();

            yarp::os::idl::WireWriter writer(reader);
           if (!writer.writeListHeader(1)) {
                yWarning("Writer invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
               return false;}
            if (!writer.write(proto)) {
                yWarning("Writer invalid protocol?! %s:%d - %s", __FILE__, __LINE__, __YFUNCTION__);
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getHeightRPC_helper::s_tag) {
            FrameGrabberMsgs_getHeightRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getWidthRPC_helper::s_tag) {
            FrameGrabberMsgs_getWidthRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getImageRPC_helper::s_tag) {
            FrameGrabberMsgs_getImageRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getImageCropRPC_helper::s_tag) {
            FrameGrabberMsgs_getImageCropRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getRgbWidthRPC_helper::s_tag) {
            FrameGrabberMsgs_getRgbWidthRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getRgbHeightRPC_helper::s_tag) {
            FrameGrabberMsgs_getRgbHeightRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper::s_tag) {
            FrameGrabberMsgs_getRgbSupportedConfigurationsRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getRgbResolutionRPC_helper::s_tag) {
            FrameGrabberMsgs_getRgbResolutionRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setRgbResolutionRPC_helper::s_tag) {
            FrameGrabberMsgs_setRgbResolutionRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getRgbFOVRPC_helper::s_tag) {
            FrameGrabberMsgs_getRgbFOVRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setRgbFOVRPC_helper::s_tag) {
            FrameGrabberMsgs_setRgbFOVRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper::s_tag) {
            FrameGrabberMsgs_getRgbIntrinsicParamRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getRgbMirroringRPC_helper::s_tag) {
            FrameGrabberMsgs_getRgbMirroringRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setRgbMirroringRPC_helper::s_tag) {
            FrameGrabberMsgs_setRgbMirroringRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getCameraDescriptionRPC_helper::s_tag) {
            FrameGrabberMsgs_getCameraDescriptionRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_hasFeatureRPC_helper::s_tag) {
            FrameGrabberMsgs_hasFeatureRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setFeature1RPC_helper::s_tag) {
            FrameGrabberMsgs_setFeature1RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getFeature1RPC_helper::s_tag) {
            FrameGrabberMsgs_getFeature1RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setFeature2RPC_helper::s_tag) {
            FrameGrabberMsgs_setFeature2RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getFeature2RPC_helper::s_tag) {
            FrameGrabberMsgs_getFeature2RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_hasOnOffRPC_helper::s_tag) {
            FrameGrabberMsgs_hasOnOffRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setActiveRPC_helper::s_tag) {
            FrameGrabberMsgs_setActiveRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getActiveRPC_helper::s_tag) {
            FrameGrabberMsgs_getActiveRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_hasAutoRPC_helper::s_tag) {
            FrameGrabberMsgs_hasAutoRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_hasManualRPC_helper::s_tag) {
            FrameGrabberMsgs_hasManualRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_hasOnePushRPC_helper::s_tag) {
            FrameGrabberMsgs_hasOnePushRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setModeRPC_helper::s_tag) {
            FrameGrabberMsgs_setModeRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getModeRPC_helper::s_tag) {
            FrameGrabberMsgs_getModeRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setOnePushRPC_helper::s_tag) {
            FrameGrabberMsgs_setOnePushRPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getVideoModeMaskDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getVideoModeDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getVideoModeDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setVideoModeDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setVideoModeDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getFPSMaskDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getFPSMaskDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getFPSDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getFPSDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setFPSDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setFPSDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getISOSpeedDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getISOSpeedDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setISOSpeedDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setISOSpeedDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getColorCodingMaskDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getColorCodingDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getColorCodingDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setColorCodingDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setColorCodingDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getFormat7MaxWindowDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getFormat7WindowDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setFormat7WindowDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setOperationModeDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setOperationModeDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getOperationModeDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getOperationModeDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setTransmissionDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setTransmissionDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getTransmissionDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getTransmissionDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setBroadcastDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setBroadcastDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setDefaultsDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setDefaultsDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setResetDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setResetDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setPowerDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setPowerDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setCaptureDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setCaptureDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_getBytesPerPacketDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper::s_tag) {
            FrameGrabberMsgs_setBytesPerPacketDC1394RPC_helper helper;
            if (!helper.cmd.readArgs(reader)) {
                return false;
            }

            helper.call(this);

            yarp::os::idl::WireWriter writer(reader);
            if (!helper.reply.write(writer)) {
                return false;
            }
            reader.accept();
            return true;
        }
        if (tag == "help") {
            std::string functionName;
            if (!reader.readString(functionName)) {
                functionName = "--all";
            }
            auto help_strings = help(functionName);
            yarp::os::idl::WireWriter writer(reader);
            if (!writer.isNull()) {
                if (!writer.writeListHeader(2)) {
                    return false;
                }
                if (!writer.writeTag("many", 1, 0)) {
                    return false;
                }
                if (!writer.writeListBegin(0, help_strings.size())) {
                    return false;
                }
                for (const auto& help_string : help_strings) {
                    if (!writer.writeString(help_string)) {
                        return false;
                    }
                }
                if (!writer.writeListEnd()) {
                    return false;
                }
            }
            reader.accept();
            return true;
        }
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        std::string next_tag = reader.readTag(1);
        if (next_tag.empty()) {
            break;
        }
        tag.append("_").append(next_tag);
        tag_len = std::count(tag.begin(), tag.end(), '_') + 1;
    }
    return false;
}
