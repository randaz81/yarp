/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_SERVICE_RGBDSENSORMSGS_H
#define YARP_THRIFT_GENERATOR_SERVICE_RGBDSENSORMSGS_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <yarp/os/ApplicationNetworkProtocolVersion.h>
#include <IDepthVisualParamsMsgs_return_getDepthAccuracy.h>
#include <IDepthVisualParamsMsgs_return_getDepthClipPlanes.h>
#include <IDepthVisualParamsMsgs_return_getDepthFOV.h>
#include <IDepthVisualParamsMsgs_return_getDepthHeight.h>
#include <IDepthVisualParamsMsgs_return_getDepthIntrinsicParam.h>
#include <IDepthVisualParamsMsgs_return_getDepthMirroring.h>
#include <IDepthVisualParamsMsgs_return_getDepthResolution.h>
#include <IDepthVisualParamsMsgs_return_getDepthWidth.h>
#include <IFrameGrabberControlMsgs_return_getActive.h>
#include <IFrameGrabberControlMsgs_return_getCameraDescription.h>
#include <IFrameGrabberControlMsgs_return_getFeature1.h>
#include <IFrameGrabberControlMsgs_return_getFeature2.h>
#include <IFrameGrabberControlMsgs_return_getMode.h>
#include <IFrameGrabberControlMsgs_return_hasAuto.h>
#include <IFrameGrabberControlMsgs_return_hasFeature.h>
#include <IFrameGrabberControlMsgs_return_hasManual.h>
#include <IFrameGrabberControlMsgs_return_hasOnOff.h>
#include <IFrameGrabberControlMsgs_return_hasOnePush.h>
#include <IRGBDMsgs_return_getDepthImage.h>
#include <IRGBDMsgs_return_getExtrinsic.h>
#include <IRGBDMsgs_return_getImages.h>
#include <IRGBDMsgs_return_getLastErrorMsg.h>
#include <IRGBDMsgs_return_getRgbImage.h>
#include <IRGBDMsgs_return_getSensorStatus.h>
#include <IRGBVisualParamsMsgs_return_getRgbFOV.h>
#include <IRGBVisualParamsMsgs_return_getRgbHeight.h>
#include <IRGBVisualParamsMsgs_return_getRgbIntrinsicParam.h>
#include <IRGBVisualParamsMsgs_return_getRgbMirroring.h>
#include <IRGBVisualParamsMsgs_return_getRgbResolution.h>
#include <IRGBVisualParamsMsgs_return_getRgbSupportedCfg.h>
#include <IRGBVisualParamsMsgs_return_getRgbWidth.h>
#include <yarp/dev/IFrameGrabberControls.h>
#include <yarp/dev/ReturnValue.h>

class RGBDSensorMsgs :
        public yarp::os::Wire
{
public:
    //ProtocolVersion
    virtual yarp::os::ApplicationNetworkProtocolVersion getLocalProtocolVersion();
    virtual yarp::os::ApplicationNetworkProtocolVersion getRemoteProtocolVersion();
    virtual bool checkProtocolVersion();

    // Constructor
    RGBDSensorMsgs();

    //Service methods
    virtual IRGBDMsgs_return_getExtrinsic getExtrinsicParamRPC();

    virtual IRGBDMsgs_return_getLastErrorMsg getLastErrorMsgRPC();

    virtual IRGBDMsgs_return_getRgbImage getRgbImageRPC();

    virtual IRGBDMsgs_return_getDepthImage getDepthImageRPC();

    virtual IRGBDMsgs_return_getImages getImagesRPC();

    virtual IRGBDMsgs_return_getSensorStatus getSensorStatusRPC();

    virtual IRGBVisualParamsMsgs_return_getRgbWidth getRgbWidthRPC();

    virtual IRGBVisualParamsMsgs_return_getRgbHeight getRgbHeightRPC();

    virtual IRGBVisualParamsMsgs_return_getRgbSupportedCfg getRgbSupportedConfigurationsRPC();

    virtual IRGBVisualParamsMsgs_return_getRgbResolution getRgbResolutionRPC();

    virtual yarp::dev::ReturnValue setRgbResolutionRPC(const std::int32_t width, const std::int32_t height);

    virtual IRGBVisualParamsMsgs_return_getRgbFOV getRgbFOVRPC();

    virtual yarp::dev::ReturnValue setRgbFOVRPC(const double horizontalFov, const double verticalFov);

    virtual IRGBVisualParamsMsgs_return_getRgbIntrinsicParam getRgbIntrinsicParamRPC();

    virtual IRGBVisualParamsMsgs_return_getRgbMirroring getRgbMirroringRPC();

    virtual yarp::dev::ReturnValue setRgbMirroringRPC(const bool mirror);

    virtual IDepthVisualParamsMsgs_return_getDepthWidth getDepthWidthRPC();

    virtual IDepthVisualParamsMsgs_return_getDepthHeight getDepthHeightRPC();

    virtual IDepthVisualParamsMsgs_return_getDepthResolution getDepthResolutionRPC();

    virtual yarp::dev::ReturnValue setDepthResolutionRPC(const std::int32_t width, const std::int32_t height);

    virtual IDepthVisualParamsMsgs_return_getDepthFOV getDepthFOVRPC();

    virtual yarp::dev::ReturnValue setDepthFOVRPC(const double horizontalFov, const double verticalFov);

    virtual IDepthVisualParamsMsgs_return_getDepthAccuracy getDepthAccuracyRPC();

    virtual yarp::dev::ReturnValue setDepthAccuracyRPC(const double accuracy);

    virtual IDepthVisualParamsMsgs_return_getDepthClipPlanes getDepthClipPlanesRPC();

    virtual yarp::dev::ReturnValue setDepthClipPlanesRPC(const double nearPlane, const double farPlane);

    virtual IDepthVisualParamsMsgs_return_getDepthMirroring getDepthMirroringRPC();

    virtual yarp::dev::ReturnValue setDepthMirroringRPC(const bool mirror);

    virtual IDepthVisualParamsMsgs_return_getDepthIntrinsicParam getDepthIntrinsicParamRPC();

    virtual IFrameGrabberControlMsgs_return_getCameraDescription getCameraDescriptionRPC();

    virtual IFrameGrabberControlMsgs_return_hasFeature hasFeatureRPC(const std::int32_t feature);

    virtual yarp::dev::ReturnValue setFeature1RPC(const std::int32_t feature, const double value);

    virtual IFrameGrabberControlMsgs_return_getFeature1 getFeature1RPC(const std::int32_t feature);

    virtual yarp::dev::ReturnValue setFeature2RPC(const std::int32_t feature, const double value1, const double value2);

    virtual IFrameGrabberControlMsgs_return_getFeature2 getFeature2RPC(const std::int32_t feature);

    virtual IFrameGrabberControlMsgs_return_hasOnOff hasOnOffRPC(const std::int32_t feature);

    virtual yarp::dev::ReturnValue setActiveRPC(const std::int32_t feature, const bool onoff);

    virtual IFrameGrabberControlMsgs_return_getActive getActiveRPC(const std::int32_t feature);

    virtual IFrameGrabberControlMsgs_return_hasAuto hasAutoRPC(const std::int32_t feature);

    virtual IFrameGrabberControlMsgs_return_hasManual hasManualRPC(const std::int32_t feature);

    virtual IFrameGrabberControlMsgs_return_hasOnePush hasOnePushRPC(const std::int32_t feature);

    virtual yarp::dev::ReturnValue setModeRPC(const std::int32_t feature, const yarp::dev::FeatureMode mode);

    virtual IFrameGrabberControlMsgs_return_getMode getModeRPC(const std::int32_t feature);

    virtual yarp::dev::ReturnValue setOnePushRPC(const std::int32_t feature);

    // help method
    virtual std::vector<std::string> help(const std::string& functionName = "--all");

    // read from ConnectionReader
    bool read(yarp::os::ConnectionReader& connection) override;
};

#endif // YARP_THRIFT_GENERATOR_SERVICE_RGBDSENSORMSGS_H
