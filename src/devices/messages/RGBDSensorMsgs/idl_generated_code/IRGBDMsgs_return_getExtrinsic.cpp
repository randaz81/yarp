/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <IRGBDMsgs_return_getExtrinsic.h>

// Constructor with field values
IRGBDMsgs_return_getExtrinsic::IRGBDMsgs_return_getExtrinsic(const yarp::dev::ReturnValue& ret,
                                                             const yarp::sig::Matrix& matrix) :
        WirePortable(),
        ret(ret),
        matrix(matrix)
{
}

// Read structure on a Wire
bool IRGBDMsgs_return_getExtrinsic::read(yarp::os::idl::WireReader& reader)
{
    if (!nested_read_ret(reader)) {
        return false;
    }
    if (!nested_read_matrix(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool IRGBDMsgs_return_getExtrinsic::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool IRGBDMsgs_return_getExtrinsic::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!nested_write_ret(writer)) {
        return false;
    }
    if (!nested_write_matrix(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool IRGBDMsgs_return_getExtrinsic::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string IRGBDMsgs_return_getExtrinsic::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read ret field
bool IRGBDMsgs_return_getExtrinsic::read_ret(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(ret)) {
        reader.fail();
        return false;
    }
    return true;
}

// write ret field
bool IRGBDMsgs_return_getExtrinsic::write_ret(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(ret)) {
        return false;
    }
    return true;
}

// read (nested) ret field
bool IRGBDMsgs_return_getExtrinsic::nested_read_ret(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(ret)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) ret field
bool IRGBDMsgs_return_getExtrinsic::nested_write_ret(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(ret)) {
        return false;
    }
    return true;
}

// read matrix field
bool IRGBDMsgs_return_getExtrinsic::read_matrix(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(matrix)) {
        reader.fail();
        return false;
    }
    return true;
}

// write matrix field
bool IRGBDMsgs_return_getExtrinsic::write_matrix(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(matrix)) {
        return false;
    }
    return true;
}

// read (nested) matrix field
bool IRGBDMsgs_return_getExtrinsic::nested_read_matrix(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(matrix)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) matrix field
bool IRGBDMsgs_return_getExtrinsic::nested_write_matrix(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(matrix)) {
        return false;
    }
    return true;
}
