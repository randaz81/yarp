/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <yCameraDescriptor.h>

// Constructor with field values
yCameraDescriptor::yCameraDescriptor(const yarp::dev::BusType busType,
                                     const std::string& deviceDescription) :
        WirePortable(),
        busType(busType),
        deviceDescription(deviceDescription)
{
}

// Read structure on a Wire
bool yCameraDescriptor::read(yarp::os::idl::WireReader& reader)
{
    if (!nested_read_busType(reader)) {
        return false;
    }
    if (!read_deviceDescription(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool yCameraDescriptor::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(2)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool yCameraDescriptor::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!nested_write_busType(writer)) {
        return false;
    }
    if (!write_deviceDescription(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool yCameraDescriptor::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(2)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string yCameraDescriptor::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read busType field
bool yCameraDescriptor::read_busType(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    int32_t _ecast;
    if (!reader.readI32(_ecast)) {
        reader.fail();
        return false;
    }
    busType = static_cast<yarp::dev::BusType>(_ecast);
    return true;
}

// write busType field
bool yCameraDescriptor::write_busType(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(static_cast<int32_t>(busType))) {
        return false;
    }
    return true;
}

// read (nested) busType field
bool yCameraDescriptor::nested_read_busType(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    int32_t _ecast;
    if (!reader.readI32(_ecast)) {
        reader.fail();
        return false;
    }
    busType = static_cast<yarp::dev::BusType>(_ecast);
    return true;
}

// write (nested) busType field
bool yCameraDescriptor::nested_write_busType(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(static_cast<int32_t>(busType))) {
        return false;
    }
    return true;
}

// read deviceDescription field
bool yCameraDescriptor::read_deviceDescription(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(deviceDescription)) {
        reader.fail();
        return false;
    }
    return true;
}

// write deviceDescription field
bool yCameraDescriptor::write_deviceDescription(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(deviceDescription)) {
        return false;
    }
    return true;
}

// read (nested) deviceDescription field
bool yCameraDescriptor::nested_read_deviceDescription(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(deviceDescription)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) deviceDescription field
bool yCameraDescriptor::nested_write_deviceDescription(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(deviceDescription)) {
        return false;
    }
    return true;
}
